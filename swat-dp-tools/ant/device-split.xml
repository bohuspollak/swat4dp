<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Copyright © 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.device-split" default="info" basedir=".">

	<dirname file="${ant.file.swat-dp-tools.device-split}" property="ant_devicesplit.dir" />
	<import file="${ant_devicesplit.dir}/taskdefs.xml" />

	<!-- ================================= 
          target: info 
         ================================= -->
	<target name="info">
		<echo message="Macros for device splitting for swat-dp-tools" />
	</target>

	<!-- ================================= 
          macrodef: device-split-objects-macro 
         ================================= -->
	<macrodef name="device-split-objects-macro">
		<attribute name="device" />
		<attribute name="domain" />
		<sequential>
			<!-- Properties used in this task -->
			<property name="export-dir" value="dist/download/device-export" />
			<property name="export-file" value="${export-dir}/export.xml" />
			<!-- Use this, if no access to dp is there (debug only) <property name="export-file" value="dist/export.xml" /> -->
			<property name="export-filtered-file" value="${export-dir}/export-filtered.xml" />
			<property name="export-ignore-file" value="filter/device-export-ignore-object-list.xml" />
			<property name="files-dir" value="dist/export/@{device}-@{domain}/master/common" />
			<property name="split-dir" value="dist/export/@{device}-@{domain}/xcfg/common" />
			<property name="xcfg-files-prefix" value="@{domain}" />
			<property name="domain.name" value="@{domain}" />

			<!-- Load the split configuration -->
			<property name="split-config-file" value="split-device-objects.properties" />
			<loadproperties srcfile="${swat.dp.tools}/config/${split-config-file}" />

			<!-- Set the style-sheets for the split actions -->
			<property name="split-files-style" value="${swat.dp.tools}/soma/xsl/split-files-style.xsl" />
			<property name="split-device-objects-style" value="${swat.dp.tools}/soma/xsl/split-device-objects-style.xsl" />
			<property name="split-objects-intrinsic-style"
			          value="${swat.dp.tools}/soma/xsl/split-objects-intrinsic-style.xsl" />
			<property name="split-objects-nocat-style"
			          value="${swat.dp.tools}/soma/xsl/split-objects-nocat-style.xsl" />

			<!-- Clear the dirs first -->
			<delete dir="${files-dir}" />
			<mkdir dir="${files-dir}" />
			<delete dir="${split-dir}" />
			<mkdir dir="${split-dir}" />

			<!-- Copy the local files -->
			<echo message="Copying the local files..." />
			<copy todir="${files-dir}" overwrite="true" verbose="true">
				<fileset dir="${export-dir}" includes="local/**" />
			</copy>

			<!-- Now start to split according to the settings in the files, groups must be maintained here, objects in the file -->
			<echo message="Start splitting the export-file ${export-file}..." />

			<!-- First, filter out the objects to be ignored (if any) and remove them from the export-file -->
			<echo message="Filter out the objects to be ignored..." />
			<!-- Step 0: Remove the filtered object-list file first -->
			<echo message="Step 0: Remove the filtered object-list file first" />
			<delete file="${export-filtered-file}" />

			<!-- Step 1: Make sure, we have an ignore list -->
			<if>
				<available file="${export-ignore-file}" />
				<then>
					<!-- Step 2: Filter the export with the content of the common project -->
					<echo message="Step 2: Filter the export with the content of the ignore list" />
					<filter-with-object-list-macro input="${export-file}"
					                               output="${export-filtered-file}"
					                               object-list="../../../${ant.project.name}/${export-ignore-file}" />
				</then>
				<else>
					<echo message="No objects to be ignored, simply copy the file over" />
					<copy tofile="${export-filtered-file}" overwrite="true" verbose="true">
						<fileset file="${export-file}" />
					</copy>
				</else>
			</if>

			<!-- Now split away the various object types -->
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-01-network.xcfg"
			                       objects="'${dev.01.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-02-radius.xcfg"
			                       objects="'${dev.02.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-03-dns.xcfg"
			                       objects="'${dev.03.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-04-time.xcfg"
			                       objects="'${dev.04.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-05-domain.xcfg"
			                       objects="'${dev.05.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-06-system.xcfg"
			                       objects="'${dev.06.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-07-cert.xcfg"
			                       objects="'${dev.07.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-08-disk.xcfg"
			                       objects="'${dev.08.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-09-nfs.xcfg"
			                       objects="'${dev.09.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-10-crypto.xcfg"
			                       objects="'${dev.10.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-15-lbg.xcfg"
			                       objects="'${dev.15.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-20-log.xcfg"
			                       objects="'${dev.20.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-30-rbm.xcfg"
			                       objects="'${dev.30.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-40-mgmt.xcfg"
			                       objects="'${dev.40.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-50-ipmi.xcfg"
			                       objects="'${dev.50.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-60-slm.xcfg"
			                       objects="'${dev.60.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-70-misc.xcfg"
			                       objects="'${dev.70.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-75-patterns.xcfg"
			                       objects="'${dev.75.objects}'" />
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-device-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-80-snmp.xcfg"
			                       objects="'${dev.80.objects}'" />

			<!-- And now split away the uncategorized objects -->
			<extract-objects-macro input="${export-filtered-file}"
			                       style="${split-objects-nocat-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-99-nocat.xcfg"
			                       objects="'${dev.99.objects}'" />

			<echo message="Done splitting the export-file ${export-file}. Please check the files in ${split-dir}." />
		</sequential>
	</macrodef>
</project>