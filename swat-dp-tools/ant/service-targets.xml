<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Copyright © 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.service-targets" default="info" basedir=".">

	<dirname file="${ant.file.swat-dp-tools.service-targets}" property="ant_servicetargets.dir" />
	<import file="${ant_servicetargets.dir}/taskdefs.xml" />
	<import file="${ant_servicetargets.dir}/chooser.xml" />

	<!-- ================================= 
          target: info 
         ================================= -->
	<target name="info">
		<echo message="Common service targets for swat-dp-tools" />
		<echoproperties prefix="swat" />
	</target>

	<!-- ================================= 
          target: init 
         ================================= -->
	<target name="init">
		<!-- Create a time stamp -->
		<tstamp>
			<format property="FILESTAMP" pattern="yyyyMMdd_HHmmss" />
		</tstamp>
		<echo message="***** service-targets initialized at ${FILESTAMP} *****" />
		<echo message="current basedir = ${basedir}" />
		<echo message="current project = ${ant.project.name}" />
		<echo message="---------- predefined properties ----------" />
		<echoproperties regex="(mgr\.target\.[^pass]+|confirm|overwrite)" />
	</target>

	<!-- ================================= 
          target: 30-service-deploy              
         ================================= -->
	<target name="30-service-deploy"
	        depends="declare,init,load-service-props,choose-deployment-policy"
	        description="--> Pack and deploy this service to the device-set associated with the selected environment.">

		<!-- Confirm if productive environment -->
		<dialog-confirm-productive-macro function="Service-Deploy" lbl-spec="Environment: ${mgr.target.env.name}" />

		<!-- Pack the service for the environment -->
		<service-pack-macro env="${mgr.target.env.name}" />

		<!-- Deploy the service on the device-set associated with this environment -->
		<service-deploy-macro env="${mgr.target.env.name}" deployment.policy="${mgr.target.deployment-policy.name}" />
	</target>

	<!-- ================================= 
          target: 31-service-deploy-with-options              
         ================================= -->
	<target name="31-service-deploy-with-options"
	        depends="declare,init,load-service-props,choose-deployment-policy"
	        description="--> Pack and deploy this service with options to choose...">

		<!-- Confirm if productive environment -->
		<dialog-confirm-productive-macro function="Service-Deploy" lbl-spec="Environment: ${mgr.target.env.name}" />

		<!-- Pack the service for the environment -->
		<service-pack-macro env="${mgr.target.env.name}" />

		<!-- Present dialog for the various deployment options if one of the options is not set -->
		<if>
			<or>
				<not>
					<isset property="deploy.quiesce.do" />
				</not>
				<not>
					<isset property="deploy.import.do" />
				</not>
				<not>
					<isset property="deploy.flush.cache.do" />
				</not>
				<not>
					<isset property="deploy.unquiesce.do" />
				</not>
				<not>
					<isset property="deploy.devices.all" />
				</not>
				<not>
					<isset property="deploy.device.primary" />
				</not>
			</or>
			<then>
				<dialog-deployment-options-macro title="Service Deployment Options" />
			</then>
		</if>
		
		<!-- Deploy the service on the device-set associated with this environment -->
		<service-deploy-macro env="${mgr.target.env.name}"
		                      do-quiesce="${deploy.quiesce.do}"
		                      do-import="${deploy.import.do}"
		                      flushCache="${deploy.flush.cache.do}"
		                      do-unquiesce="${deploy.unquiesce.do}"
		                      all-devices="${deploy.devices.all}"
		                      primary="${deploy.device.primary}"
		                      deployment.policy="${mgr.target.deployment-policy.name}" />
	</target>

	<!-- ================================= 
          target: 32-service-export              
         ================================= -->
	<target name="32-service-export"
	        depends="declare,init,load-service-props"
	        description="--> Export this service configuration from a device of the selected environment">
		<!-- Load device-set settings based on the chosen enviroment -->
		<load-device-set-props-macro device-set="${swat.device-set.name}" />

		<!-- Present the export dialog with options -->
		<dialog-export-macro title="Service-Export [${service.name}]" />

		<!-- Trigger the actual export -->
		<service-export-macro env="${mgr.target.env.name}"
		                      device="${export.device.name}"
		                      domain="${domain.name}"
		                      service="${service.name}"
		                      object="${export.service.object.name}"
		                      class="${service.object.class}" />
	</target>

	<!-- ================================= 
          target: 33-service-pack2compare              
         ================================= -->
	<target name="33-service-pack2compare"
	        depends="declare,init,choose-env"
	        description="--> pack the service configuration for a selected environment to compare an export to.">
		<!-- Step 1: Pack service-pack2compare -->
		<echo message="Step 1: Pack service-pack2compare" />
		<service-pack2compare-macro env="${mgr.target.env.name}" />
	</target>

	<!-- ================================= 
          target: 34-service-object-list-create              
         ================================= -->
	<target name="34-service-object-list-create"
	        depends="declare,init,choose-env"
	        description="--> create the object list from the import config for a selected environnment.">
		<!-- Step 1: Pack service-pack2compare -->
		<echo message="Step 1: Pack service-pack2compare" />
		<service-pack2compare-macro env="${mgr.target.env.name}" />

		<!-- Step 2: Combine the additional .xcfg files into one export file -->
		<pathconvert targetos="unix" property="common-xfg-path">
			<path location="${swat.dp.customer.home}/${ant.project.name}/dist/import/${mgr.target.env.name}/xcfg/common/"/>
		</pathconvert>
		
		<property name="xcfg-selection-expr"
		          value="file:///${common-xfg-path}/?select=*.xcfg" />
		<echo message="Step 2: Combining the files for expression ${xcfg-selection-expr} into import.xml..." />
		<combine-xcfg-files-macro input="${swat.dp.tools}/soma/xml/empty-config.xml"
		                          output="dist/object-list/${mgr.target.env.name}/import.xml"
		                          xcfg-selection-expr="${xcfg-selection-expr}" />

		<!-- Step 3: Create the object list from the import file, see split.xml -->
		<echo message="Step 3: Create the object list from the import file" />
		<extract-object-list-macro input="dist/object-list/${mgr.target.env.name}/import.xml"
		                           output="dist/object-list/${mgr.target.env.name}/import-object-list.xml" />
	</target>

	<!-- ================================= 
          target: 35-service-key-generate              
         ================================= -->
	<target name="35-service-key-generate"
	        depends="declare,init,choose-env,choose-crypto-prefix"
	        description="--> generate private key for a service on the master device of a device-set for the given environment">

		<!-- Confirm key-generation, if productive env -->
		<dialog-confirm-productive-macro function="Key-Generation"
		                                 label="Are you sure you want to generate a crypto key for the service ${service.name} in the PRODUCTIVE environment?"
		                                 lbl-spec="Environment: ${mgr.target.env.name}" />

		<!-- Generate key for service -->
		<service-key-generate-macro crypto.prefix="${mgr.target.crypto-prefix.name}" />
	</target>

	<!-- ================================= 
          target: 36-service-key-distribute              
         ================================= -->
	<target name="36-service-key-distribute"
	        depends="declare,init,choose-env,choose-crypto-prefix"
	        description="--> distribute private key for a service on the slave devices of a device-set for the given environment">

		<!-- Confirm key-distribution, if productive env -->
		<dialog-confirm-productive-macro function="Key-Distribution"
		                                 label="Are you sure you want to distribute a crypto key for the service ${service.name} in the PRODUCTIVE environment?"
		                                 lbl-spec="Environment: ${mgr.target.env.name}" />

		<!-- Distribute the key for service -->
		<service-key-generate-macro crypto.prefix="${mgr.target.crypto-prefix.name}" dist-only="true" />
	</target>

	<!-- ================================= 
          target: 37-service-cert-distribute              
         ================================= -->
	<target name="37-service-cert-distribute"
	        depends="declare,init,choose-env,choose-crypto-prefix"
	        description="--> distribute signed certs for a service on the device-set for the given environment.">

		<!-- Confirm signed-cert-distribution, if productive env -->
		<dialog-confirm-productive-macro function="Signed-Cert-Distribution"
		                                 label="Are you sure you want to distribute signed certificates for the service ${service.name} in the PRODUCTIVE environment?"
		                                 lbl-spec="Environment: ${mgr.target.env.name}" />

		<!-- Distribute signed-certs for service -->
		<service-cert-distribute-macro crypto.prefix="${mgr.target.crypto-prefix.name}" />
	</target>

	<!-- ================================= 
          target: 38-service-xcfg-reformat 
         ================================= -->
	<target name="38-service-xcfg-reformat" depends="declare" description="reorder once...">
		<xcfg-reformat-macro src-dir="xcfg" dst-dir="xcfg-formatted" conf-type="service" />
	</target>

	<!-- ================================= 
		  target: 39-service-project-clean 
		 ================================= -->
	<target name="39-service-project-clean" description="Clean the dist-folder of the project">
		<delete dir="${basedir}/dist" />
	</target>
</project>