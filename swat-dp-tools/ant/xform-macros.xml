<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Licensed Materials - Property of schlag&rahm -->
<!-- Copyright © 2010, 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- Licensed Materials - Property of IBM -->
<!-- Copyright IBM Corporation 2013. All Rights Reserved. -->
<!-- US Government Users Restricted Rights - Use, duplication or disclosure -->
<!-- restricted by GSA ADP Schedule Contract with IBM Corp. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.xform-macros" default="info" basedir=".">

	<dirname file="${ant.file.swat-dp-tools.xform-macros}" property="ant_xformmacros.dir" />
	<import file="${ant_xformmacros.dir}/taskdefs.xml" />

	<!-- ================================= 
          target: info              
         ================================= -->
	<target name="info">
		<echo message="Macros for config xform's for swat-dp-tools" />
	</target>

	<!-- ================================= 
          macrodef: extract-objects-macro 
         ================================= -->
	<macrodef name="extract-objects-macro">
		<attribute name="input" />
		<attribute name="style" />
		<attribute name="output" />
		<attribute name="objects" />
		<sequential>
			<xslt processor="trax"
			      in="@{input}"
			      style="@{style}"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<param name="filterObjectTypes" expression="@{objects}" />
				<param name="log-level" expression="${swat.log.level}" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
			<!-- remove empty config files -->
			<delete-xcfg-if-empty-macro input-file="${basedir}/@{output}" />
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: extract-object-list-macro 
         ================================= -->
	<macrodef name="extract-object-list-macro">
		<attribute name="input" />
		<attribute name="output" />
		<sequential>
			<!-- Create the object list from a datapower config file -->
			<echo message="Step 4: Create the object list from the config file" />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="${swat.dp.tools}/soma/xsl/extract-object-list.xsl"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<param name="domain" expression="${swat.domain.name}" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: extract-soma-status-macro 
         ================================= -->
	<macrodef name="extract-soma-status-macro">
		<attribute name="input" />
		<attribute name="style" default="${swat.dp.tools}/soma/xsl/extract-status.xsl" />
		<attribute name="output" />
		<sequential>
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="@{style}"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: filter-with-object-list-macro 
         ================================= -->
	<macrodef name="filter-with-object-list-macro">
		<attribute name="input" />
		<attribute name="output" />
		<attribute name="object-list" />
		<sequential>
			<!-- Filter a datapower config file with an object list file, optionally reverse the sort -->
			<echo message="Filter a datapower config file with an object list file" />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="${swat.dp.tools}/soma/xsl/filter-with-object-list.xsl"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<param name="importFile" expression="@{object-list}" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: create-service-export-request-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="create-service-export-request-macro">
		<attribute name="input" />
		<attribute name="output" />
		<attribute name="domain" />
		<attribute name="class" />
		<attribute name="object" />
		<sequential>
			<!-- Create a soma request to export service objects from a given domain -->
			<echo message="Create a soma request to export service objects from a given domain" />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="${swat.dp.tools}/soma/xsl/create-service-export-request.xsl"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<param name="domain" expression="@{domain}" />
				<param name="serviceObjectClass" expression="@{class}" />
				<param name="serviceObjectName" expression="@{object}" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: create-file-export-request-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="create-file-export-requests-macro">
		<attribute name="input" />
		<attribute name="output" />
		<attribute name="domain" />
		<sequential>
			<!-- Create a soma request to export files from a given domain -->
			<echo message="Create a soma request to export files from a given domain [input=@{input}]" />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="${swat.dp.tools}/soma/xsl/create-file-export-requests.xsl"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<param name="domain" expression="@{domain}" />
				<param name="filestore" expression="${basedir}/dist/download/filestore-export-response.xml" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: create-filestore-export-request-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="create-filestore-export-request-macro">
		<attribute name="input" />
		<attribute name="output" />
		<attribute name="domain" />
		<sequential>
			<!-- Create a soma request to export a filestore from a given domain -->
			<echo message="Create a soma request to a filestore from a given domain" />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="${swat.dp.tools}/soma/xsl/create-filestore-export-request.xsl"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<param name="domain" expression="@{domain}" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: create-delete-object-list-request-macro 
         ================================= -->
	<macrodef name="create-delete-object-list-request-macro">
		<attribute name="input" />
		<attribute name="output" />
		<sequential>
			<!-- Create a soma request to delete objects from a given config file, reverse the sort order -->
			<echo message="Create a soma request to delete objects from a given config file" />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="${swat.dp.tools}/soma/xsl/create-delete-object-request.xsl"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: combine-prefix-xcfg-files-macro 
         ================================= -->
	<macrodef name="combine-prefix-xcfg-files-macro">
		<attribute name="prefix" />
		<sequential>
			<!-- Combine the prefix files into one -->
			<local name="count.files" />
			<resourcecount property="count.files">
				<fileset dir="${import-dir}/xcfg/common" includes="@{prefix}*.xcfg" />
			</resourcecount>
			<if>
				<and>
					<not>
						<equals arg1="${count.files}" arg2="0" />
					</not>
					<not>
						<equals arg1="${count.files}" arg2="1" />
					</not>
				</and>
				<then>
					<echo message="Count ${count.files}, combining the files for prefix @{prefix}..." />
					<local name="xcfg-selection-expr" />
					<property name="xcfg-selection-expr"
					          value="file:///${basedir}/${relative-import-dir}/xcfg/common/?select=@{prefix}*.xcfg" />
					<echo message="Combining the files for expression ${xcfg-selection-expr} into file @{prefix}.xcfg..." />
					<combine-xcfg-files-macro input="dist/empty-config.xml"
					                          output="${import-dir}/xcfg/common/@{prefix}.tmp"
					                          xcfg-selection-expr="${xcfg-selection-expr}" />
					<delete dir="${import-dir}/xcfg/common" includes="@{prefix}*.xcfg" />
					<move tofile="${import-dir}/xcfg/common/@{prefix}.xcfg"
					      file="${import-dir}/xcfg/common/@{prefix}.tmp" />
				</then>
				<else>
					<echo message="Count ${count.files}, skipping the combining of the files for prefix @{prefix}." />
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: combine-xcfg-files-macro 
         ================================= -->
	<macrodef name="combine-xcfg-files-macro">
		<attribute name="input" />
		<attribute name="output" />
		<attribute name="xcfg-selection-expr" />
		<sequential>
			<!-- Combine the additional .xcfg files into one export file -->
			<echo message="Combining the files for expression @{xcfg-selection-expr} into one export file..." />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="@{input}"
			      style="${swat.dp.tools}/soma/xsl/combine-xcfg.xsl"
			      out="@{output}"
			      classpathref="swat.dp.tools.classpath">
				<param name="xcfgSelection" expression="@{xcfg-selection-expr}" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: verify-filter-xcfg-files-macro 
         ================================= -->
	<macrodef name="verify-filter-xcfg-files-macro">
		<attribute name="src-file" />
		<sequential>
			<!-- verify result -->
			<local name="all-config-properties" />
			<loadfile property="all-config-properties" srcFile="@{src-file}" />
			<condition property="missing-properties">
				<matches pattern="@[0-9a-zA-Z.-]*@" string="${all-config-properties}" />
			</condition>
			<fail message="Some tokens have not been replaced in @{src-file}!" if="missing-properties" />
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: verify-soma-response-macro 
         ================================= -->
	<macrodef name="verify-soma-response-macro">
		<attribute name="src-file" />
		<attribute name="result-property" />
		<attribute name="pattern" />
		<sequential>
			<!-- verify result -->
			<local name="all-response-properties" />
			<loadfile property="all-response-properties" srcFile="@{src-file}" />
			<condition property="@{result-property}">
				<matches pattern="@{pattern}" string="${all-response-properties}" casesensitive="true" />
			</condition>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: extract-xpath-macro 
         ================================= -->
	<macrodef name="extract-xpath-macro">
		<attribute name="input-file" />
		<attribute name="xpath" />
		<attribute name="property-name" />
		<sequential>
			<!-- Extract the result of the given xpath into the given property -->
			<echo message="Extract given xpath into a given property" />
			<xmltask>
				<fileset file="@{input-file}" />
				<copy path="@{xpath}" property="@{property-name}" />
			</xmltask>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
	      macrodef: extract-zip-file-macro          
	     = = = = = = = = = = = = = = = = = -->
	<macrodef name="extract-zip-file-macro">
		<attribute name="tmp.dir" />
		<attribute name="soma.request" />
		<sequential>
			<!-- Extract and decode the file from the response -->
			<xslt processor="trax"
			      in="dist/@{tmp.dir}/@{soma.request}-response.xml"
			      style="${swat.dp.tools}/soma/xsl/extract-file.xsl"
			      out="dist/@{tmp.dir}/@{soma.request}.b64"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>

			<!-- Base64 Decode the extracted file -->
			<base64-decode-macro infile="dist/@{tmp.dir}/@{soma.request}.b64"
			                     outfile="dist/@{tmp.dir}/@{soma.request}.zip" />
			
			<!-- clean unpack directory -->
			<delete dir="dist/@{tmp.dir}/@{soma.request}" />

			<!-- Unpack the backup zip file -->
			<unzip src="dist/@{tmp.dir}/@{soma.request}.zip" dest="dist/@{tmp.dir}/@{soma.request}" />
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
	      macrodef: extract-file-macro          
	     = = = = = = = = = = = = = = = = = -->
	<macrodef name="extract-file-macro">
		<attribute name="tmp.dir" />
		<attribute name="soma.request" />
		<attribute name="file.name" />
		<sequential>
			<!-- Extract and decode the file from the response -->
			<xslt processor="trax"
			      in="dist/@{tmp.dir}/@{soma.request}-response.xml"
			      style="${swat.dp.tools}/soma/xsl/extract-file.xsl"
			      out="dist/@{tmp.dir}/@{file.name}.b64"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>

			<!-- Base64 Decode the extracted file -->
			<base64-decode-macro infile="dist/@{tmp.dir}/@{file.name}.b64" outfile="dist/@{tmp.dir}/@{file.name}" />
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: delete-xcfg-if-empty-macro 
         ================================= -->
	<macrodef name="delete-xcfg-if-empty-macro">
		<attribute name="input-file" />
		<sequential>
			<local name="numObjects" />
			<!-- Step 1: Check whether there are any objects in the config file -->
			<echo message="Step 1: Check whether there are any objects in the config file" />
			<extract-xpath-macro input-file="@{input-file}"
			                     xpath="count(/*[local-name()='datapower-configuration']/*[local-name()='configuration']/*)"
			                     property-name="numObjects" />
			<if>
				<equals arg1="${numObjects}" arg2="0" />
				<then>
					<!-- Step 2: No objects configured, remove file -->
					<echo message="Step 2: No objects configured, remove file [@{input-file}]." />
					<delete file="@{input-file}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
	      macrodef: copy-files-content-macro          
	     = = = = = = = = = = = = = = = = = -->
	<macrodef name="copy-files-content-macro">
		<attribute name="src-dir" />
		<attribute name="dst-dir" />
		<attribute name="filter" />
		<attribute name="label" />
		<sequential>
			<if>
				<available file="@{src-dir}" type="dir" />
				<then>
					<echo message="Copying filtered @{label} content ..." />
					<copy todir="@{dst-dir}" filtering="true" verbose="true" overwrite="true">
						<fileset dir="@{src-dir}" excludesfile="${binary.excludes}" excludes="**/readme.txt" />
						<filterset refid="@{filter}" />
					</copy>
					<echo message="Copying unfiltered @{label} content ..." />
					<copy todir="@{dst-dir}" filtering="false" verbose="true" overwrite="true">
						<fileset dir="@{src-dir}" includesfile="${binary.excludes}" />
					</copy>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
	      macrodef: copy-xcfg-content-macro          
	     = = = = = = = = = = = = = = = = = -->
	<macrodef name="copy-xcfg-content-macro">
		<attribute name="src-dir" />
		<attribute name="dst-dir" />
		<attribute name="filter" />
		<attribute name="label" />
		<sequential>
			<if>
				<available file="@{src-dir}" type="dir" />
				<then>
					<echo message="Copying filtered @{label} *.xcfg files ..." />
					<copy todir="@{dst-dir}" filtering="true" verbose="true" overwrite="true">
						<fileset dir="@{src-dir}" includes="**/*.xcfg" />
						<filterset refid="@{filter}" />
					</copy>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
	      macrodef: copy-soma-request-macro          
	     = = = = = = = = = = = = = = = = = -->
	<macrodef name="copy-soma-request-macro">
		<attribute name="soma.request" />
		<attribute name="dst.dir" />
		<attribute name="filter" />
		<sequential>
			<!-- Filter soma-request-file with the filter given -->
			<echo message="Copy and filter the soma-request @{soma.request}.xml to @{dst.dir}" />
			<copy todir="@{dst.dir}"
			      file="${swat.dp.tools}/soma/xml/@{soma.request}.xml"
			      filtering="true"
			      overwrite="true"
			      verbose="true">
				<filterset refid="@{filter}" />
			</copy>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: xcfg-reformat-macro 
         ================================= -->
	<macrodef name="xcfg-reformat-macro">
		<attribute name="src-dir" />
		<attribute name="dst-dir" />
		<attribute name="conf-type" />
		<sequential>
			<!-- reorder attributes for manual comparison -->
			<echo message="Reformat xml and re-add namespaces to the xcfg files in dir @{src-dir}..." />
			<delete dir="@{dst-dir}" failonerror="false" />
			<mkdir dir="@{dst-dir}" />
			<xslt processor="trax"
			      basedir="@{src-dir}"
			      style="${swat.dp.tools}/soma/xsl/add-namespaces-after-tokenization-@{conf-type}.xsl"
			      destdir="@{dst-dir}"
			      extension=".xcfg"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: tokenize-device-config-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="tokenize-device-config-macro">
		<attribute name="src-dir" />
		<attribute name="dst-dir" default="@{src-dir}/../tokenized"/>
		<attribute name="file-extension" default=".xcfg" />
		<sequential>
			<!-- reorder attributes for manual comparison -->
			<echo message="Replace configuration values in a device export (default domain) with appropriate tokens (see ${dst-dir}) and print the properties to the console ..." />
			<delete dir="@{dst-dir}" failonerror="false" />
			<mkdir dir="@{dst-dir}" />
			<xslt processor="trax"
			      basedir="@{src-dir}"
			      style="${swat.dp.tools}/soma/xsl/tokenize-device.xsl"
			      destdir="@{dst-dir}"
			      extension="@{file-extension}"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: tokenize-service-config-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="tokenize-service-config-macro">
		<attribute name="src-dir" />
		<attribute name="dst-dir" default="@{src-dir}/../tokenized"/>
		<attribute name="file-extension" default=".xcfg" />
		<sequential>
			<!-- reorder attributes for manual comparison -->
			<echo message="Replace configuration values in a service export with appropriate tokens (see @{dst-dir}) and print the properties to the console ..." />
			<delete dir="@{dst-dir}" failonerror="false" />
			<mkdir dir="@{dst-dir}" />
			<xslt processor="trax"
			      basedir="@{src-dir}"
			      style="${swat.dp.tools}/soma/xsl/tokenize-service.xsl"
			      destdir="@{dst-dir}"
			      extension="@{file-extension}"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: join-vars-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="join-vars-macro">
		<attribute name="result" />
		<attribute name="arg1" />
		<attribute name="arg2" />
		<attribute name="delimiter" default="," />
		<sequential>
			<if>
				<and>
					<equals arg1="@{arg1}" arg2="" />
					<equals arg1="@{arg2}" arg2="" />
				</and>
				<then>
					<var name="@{result}" value="" />
				</then>
				<elseif>
					<or>
						<equals arg1="@{arg1}" arg2="" />
						<equals arg1="@{arg2}" arg2="" />
					</or>
					<then>
						<if>
							<equals arg1="@{arg1}" arg2="" />
							<then>
								<var name="@{result}" value="@{arg2}" />
							</then>
							<else>
								<var name="@{result}" value="@{arg1}" />
							</else>
						</if>
					</then>
				</elseif>
				<else>
					<var name="@{result}" value="@{arg1},@{arg2}" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: base64-encode-macro 
         ================================= -->
	<macrodef name="base64-encode-macro">
		<attribute name="infile" />
		<attribute name="outfile" />
		<sequential>
			<delete file="@{outfile}" />
			<if>
				<isset property="openssl.exec" />
				<then>
					<exec executable="${openssl.exec}">
						<arg value="enc" />
						<arg value="-base64" />
						<arg value="-in" />
						<arg value="@{infile}" />
						<arg value="-out" />
						<arg value="@{outfile}" />
					</exec>
				</then>
				<else>
					<base64 infile="@{infile}" outfile="@{outfile}" decode="false" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: base64-decode-macro 
         ================================= -->
	<macrodef name="base64-decode-macro">
		<attribute name="infile" />
		<attribute name="outfile" />
		<sequential>
			<delete file="@{outfile}" />
			<if>
				<isset property="openssl.exec" />
				<then>
					<exec executable="${openssl.exec}">
						<arg value="enc" />
						<arg value="-d" />
						<arg value="-A" />
						<arg value="-base64" />
						<arg value="-in" />
						<arg value="@{infile}" />
						<arg value="-out" />
						<arg value="@{outfile}" />
					</exec>
				</then>
				<else>
					<base64 infile="@{infile}" outfile="@{outfile}" decode="true" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: decrypt-password-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="decrypt-password-macro">
		<attribute name="password.text" />
		<attribute name="password.property" />
	    <attribute name="password.keyfile" default="${user.home}/swat4dp-secret.key" />
		<sequential>
			<echo message="decrypting password '@{password.text}' ..." />
			<if>
				<not>
					<equals arg1="@{password.text}" arg2="" />
				</not>
				<then>
					<crypto mode="decrypt"
        					        keyfile="@{password.keyfile}"
        					        property="@{password.property}"
        					        input="@{password.text}"
        					        useprefix="true"
							        overwrite="true"/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- ================================= 
          macrodef: remove-empty-elements-macro 
         ================================= -->
	<macrodef name="remove-empty-elements-macro">
		<attribute name="src-dir" />
		<attribute name="dst-dir" default="@{src-dir}/../cleanup"/>
		<attribute name="file-extension" default=".xcfg" />
		<sequential>
			<echo message="Remove configuration elements that have an empty name attribute ..." />
			<delete dir="@{dst-dir}" failonerror="false" />
			<mkdir dir="@{dst-dir}" />
			<xslt processor="trax"
			      basedir="@{src-dir}"
			      style="${swat.dp.tools}/soma/xsl/remove-empty-elements.xsl"
			      destdir="@{dst-dir}"
			      extension="@{file-extension}"
			      classpathref="swat.dp.tools.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
			<copy todir="@{src-dir}" filtering="false" verbose="false" overwrite="true">
				<fileset dir="@{dst-dir}" excludesfile="${binary.excludes}" includes="**/*@{file-extension}" />
			</copy>
			<delete dir="@{dst-dir}" failonerror="false" />
		</sequential>
	</macrodef>
	
	<!-- ================================= 
          macrodef: create-service-docu-macro 
         ================================= -->
	<macrodef name="create-service-docu-macro">
		<attribute name="env" />
		<attribute name="domain" />
		<attribute name="service" />
		<attribute name="class" />
		<sequential>
			<!-- Create a  -->
			<echo message="Create service documentation for ${service.name}" />
			<delete file="@{output}" />
			<xslt processor="trax"
			      in="dist/import/@{env}/export.xml"
			      style="${swat.dp.tools}/soma/xsl/create-html-service-doc.css.xsl"
			      out="dist/docs/@{env}/@{service}.html"
			      classpathref="swat.dp.tools.classpath">
				<param name="project" expression="${ant.project.name}" />
				<param name="service" expression="@{service}" />
				<param name="class" expression="@{class}" />
				<param name="env" expression="@{env}" />
				<factory name="net.sf.saxon.TransformerFactoryImpl" />
			</xslt>
		</sequential>
	</macrodef>
</project>