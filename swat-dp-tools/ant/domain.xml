<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Copyright © 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.domain" default="info" basedir=".">

	<dirname file="${ant.file.swat-dp-tools.domain}" property="ant_domain.dir" />
	<import file="${ant_domain.dir}/taskdefs.xml" />
	<import file="${ant_domain.dir}/chooser.xml" />

	<!-- ================================= 
          target: info              
         ================================= -->
	<target name="info">
		<echo message="Macros for domains for swat-dp-tools" />
	</target>

	<!-- ================================= 
          target: 24-domain-cleanup-on-device              
         ================================= -->
	<target name="24-domain-cleanup-on-device">
		<!-- Step 0: Load current device settings -->
		<load-device-props-macro device="${foreach.device.name}" />

		<!-- Step 1: Export the objects from domain for device -->
		<echo message="Step 1: Export all the objects from domain" />
		<domain-export-objects-macro device="${foreach.device.name}" domain="${swat.domain.name}" />

		<!-- Step 2: Pack all services into one import file -->
		<echo message="Step 2: Pack all services into one import file" />
		<delete dir="dist/import/${swat.env.name}/xcfg/common" />
		<foreach target="domain-pack-service-xcfg"
		         list="${swat.service.list}"
		         delimiter=","
		         param="mgr.target.service.name"
		         inheritall="true"
		         inheritrefs="true" />

		<!-- Step 3: Combine the additional .xcfg files into one export file -->
		<property name="xcfg-selection-expr"
		          value="../../../${ant.project.name}/dist/import/${swat.env.name}/xcfg/common/?select=*.xcfg" />
		<echo message="Step 3: Combining the files for expression ${xcfg-selection-expr} into import.xml..." />
		<combine-xcfg-files-macro input="${swat.dp.tools}/soma/xml/empty-config.xml"
		                          output="dist/import/${swat.env.name}/import.xml"
		                          xcfg-selection-expr="${xcfg-selection-expr}" />

		<!-- Step 4: Create the object list from the import file, see split.xml -->
		<echo message="Step 4: Create the object list from the import file" />
		<extract-object-list-macro input="dist/import/${swat.env.name}/import.xml"
		                           output="dist/import/${swat.env.name}/import-object-list.xml" />

		<!-- Step 5: Filter the export with the content of the import -->
		<echo message="Step 5: Filter the export with the content of the import" />
		<filter-with-object-list-macro input="dist/download/domain-export/export.xml"
		                               output="dist/cleanup/${foreach.device.name}-${swat.env.name}-export-filtered.xml"
		                               object-list="../../../${ant.project.name}/dist/import/${swat.env.name}/import-object-list.xml" />

		<!-- Step 6: Create a delete object request from the filtered export file -->
		<echo message="Step 6: Create a delete object request from the filtered export file" />
		<create-delete-object-list-request-macro input="dist/cleanup/${foreach.device.name}-${swat.env.name}-export-filtered.xml"
		                                         output="dist/cleanup/${foreach.device.name}-${swat.env.name}-config-delete.xml" />

		<!-- Step 7: Check whether there are any objects to delete -->
		<echo message="Step 7: Check whether there are any objects to delete" />
		<extract-xpath-macro input-file="dist/cleanup/${foreach.device.name}-${swat.env.name}-config-delete.xml"
		                     xpath="count(//*[local-name()='del-config']/*)"
		                     property-name="numObjects" />
		<if>
			<equals arg1="${numObjects}" arg2="0" />
			<then>
				<!-- Step 8: No objects to be deleted, continue -->
				<echo message="Step 8: No objects to be deleted for [${swat.domain.name}/${device.label}], continue." />
			</then>
			<else>
				<!-- Step 8: Confirm the deletion of the objects (ant-form) -->
				<echo message="Step 8: Confirm the deletion of the objects (ant-form)" />
				<dialog-confirm-macro title="Cleanup Objects [${swat.domain.name}/${device.label}]"
				                      label="Are you sure, you want to delete the identified objects in Domain [${swat.domain.name}] on Device [${device.label}]?"
				                      content="Please view the file ${basedir}/dist/cleanup/${foreach.device.name}-${swat.env.name}-config-delete.xml for the detailed content."
				                      fail-message="Objects will not be deleted, action cancelled by user." />

				<!-- Step 9: Run the delete object request against the chosen device (no preparation necessary) -->
				<echo message="Step 9: Run the delete object request against the chosen device" />
				<soma-run-single-request-on-single-device-macro device="${foreach.device.name}"
				                                                soma.request="${foreach.device.name}-${swat.env.name}-config-delete"
				                                                tmp.dir="cleanup"
				                                                check.response="true" />
			</else>
		</if>
	</target>

	<!-- ================================= 
          target: domain-pack-service-xcfg 
         ================================= -->
	<target name="domain-pack-service-xcfg" depends="declare,load-service-props">
		<domain-pack-service-xcfg-macro service="${mgr.target.service.name}" />
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: domain-pack-service-xcfg-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="domain-pack-service-xcfg-macro">
		<attribute name="service" />
		<sequential>
			<!-- Load the service props first -->
			<load-service-props-macro zone="${swat.zone.name}" env="${swat.env.name}" domain="${swat.domain.name}" service="@{service}" />
			
			<!-- Pack the individual service -->
			<ant antfile="${swat.current.service.home}/build.xml"
			     target="32-service-pack2compare"
			     inheritrefs="true"
			     useNativeBasedir="true" />
			
			<!-- Copy it closer and in one dir -->
			<if>
				<available file="${swat.current.service.home}/dist/import/${swat.env.name}/xcfg/common" type="dir" />
				<then>
					<copy todir="dist/import/${swat.env.name}/xcfg/common" verbose="true" overwrite="true">
						<fileset dir="${swat.current.service.home}/dist/import/${swat.env.name}/xcfg/common"
						         includes="**/*.xcfg" />
					</copy>
				</then>
			</if>
			</sequential>
		</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: domain-export-objects-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="domain-export-objects-macro">
		<attribute name="device" />
		<attribute name="domain" />
		<sequential>
			<!-- Prepare the soma-request service-export -->
			<soma-prepare-request-macro soma.request="domain-export"
			                            domain="@{domain}"
			                            content.exists="false"
			                            tmp.dir="download" />

			<!-- Run the soma-request service-export -->
			<soma-run-single-request-on-single-device-macro device="@{device}"
			                                                soma.request="domain-export"
			                                                tmp.dir="download"
			                                                check.response="true" />

			<!-- Extract the objects from the downloaded soma-response -->
			<extract-zip-file-macro soma.request="domain-export" tmp.dir="download" />
		</sequential>
	</macrodef>
</project>