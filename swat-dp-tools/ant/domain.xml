<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Licensed Materials - Property of schlag&rahm -->
<!-- Copyright © 2010, 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- Licensed Materials - Property of IBM -->
<!-- Copyright IBM Corporation 2013. All Rights Reserved. -->
<!-- US Government Users Restricted Rights - Use, duplication or disclosure -->
<!-- restricted by GSA ADP Schedule Contract with IBM Corp. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.domain" default="info" basedir=".">

    <dirname file="${ant.file.swat-dp-tools.domain}" property="ant_domain.dir" />
    <import file="${ant_domain.dir}/taskdefs.xml" />
    <import file="${ant_domain.dir}/chooser.xml" />

    <!-- =================================
        target: info
        ================================= -->
    <target name="info">
        <echo message="Macros for domains for swat-dp-tools" />
    </target>


    <!-- =================================
        target: domain-pack-service-xcfg
        ================================= -->
    <target name="domain-pack-service-xcfg" depends="declare,load-service-props">
        <domain-pack-service-xcfg-macro service="${mgr.target.service.name}" />
    </target>



    <!-- = = = = = = = = = = = = = = = = =
        macrodef: domain-pack-service-xcfg-macro
        = = = = = = = = = = = = = = = = = -->
    <macrodef name="domain-pack-service-xcfg-macro">
        <attribute name="service" />
        <sequential>
            <!-- Load the service props first -->
            <load-service-props-macro zone="${swat.zone.name}" env="${swat.env.name}" domain="${swat.domain.name}"
                service="@{service}" />

            <!-- Pack the individual service -->
            <ant antfile="${swat.current.service.home}/build.xml" target="33-service-pack2compare" inheritrefs="true"
                useNativeBasedir="true" />

            <!-- Copy it closer and in one dir -->
            <if>
                <available file="${swat.current.service.home}/dist/import/${swat.env.name}/xcfg/common" type="dir" />
                <then>
                    <copy todir="dist/import/${swat.env.name}/${swat.domain.name}/xcfg/common" verbose="true" overwrite="true">
                        <fileset dir="${swat.current.service.home}/dist/import/${swat.env.name}/xcfg/common" includes="**/*.xcfg" />
                    </copy>
                </then>
            </if>
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
        macrodef: domain-pack-service-macro
        = = = = = = = = = = = = = = = = = -->
    <macrodef name="domain-pack-service-macro">
        <attribute name="service" />
        <sequential>
            <!-- Load the service props first -->
            <load-service-props-macro zone="${swat.zone.name}" env="${swat.env.name}" domain="${swat.domain.name}"
                service="@{service}" />

            <!-- Pack the individual service -->
            <ant antfile="${swat.current.service.home}/build.xml" target="33-service-pack2compare" inheritrefs="true"
                useNativeBasedir="true" />

            <!-- Copy all import files to a sinlge directory -->
            <if>
                <equals arg1="@{service}" arg2="common" />
                <then>
                    <copy todir="dist/import/${swat.env.name}/${swat.domain.name}" verbose="true" overwrite="true">
                        <fileset dir="${swat.current.service.home}/dist/import/${swat.env.name}" />
                        <!-- we need this mapper to change the sort order as the common xcfg files have to be loaded first -->
                        <regexpmapper from="(.*)common-(.*)" to="\1_common-\2" />
                    </copy>
                </then>
                <else>
                    <copy todir="dist/import/${swat.env.name}/${swat.domain.name}" verbose="true" overwrite="true">
                        <fileset dir="${swat.current.service.home}/dist/import/${swat.env.name}" />
                    </copy>
                </else>
            </if>
            <!-- Copy empty-config file for further processing -->
            <copy todir="dist/import/${swat.env.name}/${swat.domain.name}" filtering="true" verbose="true" overwrite="true">
                <fileset file="${swat.current.service.home}/dist/empty-config.xml" />
            </copy>
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
        macrodef: domain-export-objects-macro
        = = = = = = = = = = = = = = = = = -->
    <macrodef name="domain-export-objects-macro">
        <attribute name="device" />
        <attribute name="domain" />
        <sequential>
            <!-- Prepare the soma-request service-export -->
            <soma-prepare-request-macro soma.request="domain-export" domain="@{domain}" content.exists="false"
                tmp.dir="download" />

            <!-- Run the soma-request service-export -->
            <soma-run-single-request-on-single-device-macro device="@{device}"
                soma.request="domain-export" tmp.dir="download" check.response="true" />

            <!-- Extract the objects from the downloaded soma-response -->
            <extract-zip-file-macro soma.request="domain-export" tmp.dir="download" />
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
        macrodef: add-password-alias-macro
        = = = = = = = = = = = = = = = = = -->
    <macrodef name="add-password-alias-macro">
        <attribute name="env" />
        <attribute name="domain" />
        <attribute name="alias" />
        <attribute name="comment" />
        <attribute name="password" />
        <attribute name="overwrite" default="false" />

        <sequential>

            <!-- Clear the upload directories -->
            <delete dir="dist/upload" />
            <mkdir dir="dist/upload" />

            <!-- Prepare local variables -->
            <property name="local.env" value="@{env}" />
            <property name="local.device.set" value="${swat.device-set.name}" />
            <property name="local.domain" value="@{domain}" />

            <filterset id="password-alias.filter.id">
                <filter token="password.alias.name" value="@{alias}" />
                <filter token="password.alias.comment" value="@{comment}" />
                <filter token="password.alias.secret" value="@{password}" />
            </filterset>

            <!-- Prepare the soma-request service-export -->
            <soma-prepare-request-macro soma.request="password-alias-config-template" domain="@{domain}"
                content.dir="${basedir}/dist" custom.filter="password-alias.filter.id" />

            <soma-prepare-request-macro soma.request="do-import" domain="@{domain}" content.exists="true"
                content.dir="dist/upload" content.type="XML" content.file="password-alias-config-template.xml"
                content.overwrite.objects="@{overwrite}" />

            <soma-prepare-request-macro soma.request="config-save" domain="${local.domain}"
                content.exists="false" content.dir="dist/upload" />

            <!-- Run the soma-request service-export -->
            <soma-run-multi-requests-on-multi-devices-macro device.set="${local.device.set}"
                soma.requests="do-import,config-save" check.response="true" check.response.pattern="skipped" />

            <!-- clean up the upload directory as files contain the password in clear text -->
            <delete>
                <fileset dir="dist/upload">
                    <include name="password-alias-config-template.*" />
                    <include name="do-import.xml" />
                </fileset>
            </delete>

        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
        macrodef: upload-file-macro
        = = = = = = = = = = = = = = = = = -->
    <macrodef name="upload-file-macro">
        <attribute name="env" />
        <attribute name="domain" />
        <attribute name="source.file" />
        <attribute name="target.dir" />
        <sequential>

            <!-- Prepare local variables -->
            <property name="local.env" value="@{env}" />
            <property name="local.device.set" value="${swat.device-set.name}" />
            <property name="local.domain" value="@{domain}" />
            <property name="local.content.dir" value="${basedir}/dist/uploadfile" />
            <echo message="source.file = @{source.file}" />
            <propertyregex property="local.content.file" input="@{source.file}" regexp="([^\\/]+)$" select="\1"
                casesensitive="false" />
            <echo message="local.content.file = ${local.content.file}" />
            <!-- Clear the upload directories -->
            <delete dir="${local.content.dir}" />
            <mkdir dir="${local.content.dir}" />

            <copy file="@{source.file}" todir="${local.content.dir}" />

            <!-- prepare soma-request setfile -->
            <soma-prepare-request-macro soma.request="setfile" domain="${local.domain}" env="${swat.env.name}"
                content.exists="true" content.dir="${local.content.dir}" content.file="${local.content.file}" tmp.dir="uploadfile"
                dp.file.name="@{target.dir}/${local.content.file}" />

            <!-- Run the soma-request service-export -->
            <soma-run-multi-requests-on-multi-devices-macro device.set="${local.device.set}"
                soma.requests="setfile" tmp.dir="uploadfile" check.response="true" check.response.pattern="skipped" />

            <!-- clean up the upload directory as files contain the password in clear text -->
            <delete>
                <fileset dir="${local.content.dir}">
                    <include name="*" />
                </fileset>
            </delete>
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
        macrodef: delete-file-macro
        = = = = = = = = = = = = = = = = = -->
    <macrodef name="delete-file-macro">
        <attribute name="env" />
        <attribute name="domain" />
        <attribute name="path" />

        <sequential>

            <!-- Prepare local variables -->
            <property name="local.env" value="@{env}" />
            <property name="local.device.set" value="${swat.device-set.name}" />
            <property name="local.domain" value="@{domain}" />

            <!-- prepare soma-request setfile -->
            <soma-prepare-request-macro soma.request="deletefile" domain="${local.domain}" env="${swat.env.name}"
                content.exists="false" tmp.dir="deletefile" dp.file.name="@{path}" />

            <!-- Run the soma-request service-export -->
            <soma-run-multi-requests-on-multi-devices-macro device.set="${local.device.set}"
                soma.requests="deletefile" tmp.dir="deletefile" check.response="true" check.response.pattern="skipped" />

        </sequential>
    </macrodef>
</project>