<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Copyright © 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.domain-targets" default="info" basedir=".">

    <dirname file="${ant.file.swat-dp-tools.domain-targets}" property="ant_domaintargets.dir" />
    <import file="${ant_domaintargets.dir}/taskdefs.xml" />
    <import file="${ant_domaintargets.dir}/chooser.xml" />
    <import file="${ant_domaintargets.dir}/soma.xml" />

    <!-- - - - - - - - - - - - - - - - - - 
          target: info 
         - - - - - - - - - - - - - - - - - -->
    <target name="info">
        <echo message="Common domain targets for swat-dp-tools" />
        <echoproperties prefix="swat" />
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: init 
         - - - - - - - - - - - - - - - - - -->
    <target name="init">
        <!-- Create a time stamp -->
        <tstamp>
            <format property="FILESTAMP" pattern="yyyyMMdd_HHmmss" />
        </tstamp>
        <echo message="***** domain-targets initialized at ${FILESTAMP} *****" />
        <echo message="current basedir = ${basedir}" />
        <echo message="current project = ${ant.project.name}" />
        <echo message="---------- predefined properties ----------" />
        <echoproperties regex="(mgr\.target\.device|mgr\.target\.user|confirm|overwrite)" />
    </target>


    <!-- ================================= 
          target: 24-domain-cleanup-on-device              
         ================================= -->
    <target name="24-domain-cleanup-on-device">
        <!-- Step 0: Load current device settings -->
        <load-device-props-macro device="${foreach.device.name}" />

        <!-- Step 1: Export the objects from domain for device -->
        <echo message="Step 1: Export all the objects from domain" />
        <domain-export-objects-macro device="${foreach.device.name}" domain="${swat.domain.name}" />

        <!-- Step 2: Pack all services into one import file -->
        <echo message="Step 2: Pack all services into one import file" />
        <delete dir="dist/import/${swat.env.name}/xcfg/common" />
        <foreach target="domain-pack-service-xcfg"
                 list="${swat.service.list}"
                 delimiter=","
                 param="mgr.target.service.name"
                 inheritall="true"
                 inheritrefs="true" />

        <!-- Step 3: Combine the additional .xcfg files into one export file -->
        <property name="xcfg-selection-expr"
                  value="../../../${ant.project.name}/dist/import/${swat.env.name}/xcfg/common/?select=*.xcfg" />
        <echo message="Step 3: Combining the files for expression ${xcfg-selection-expr} into import.xml..." />
        <combine-xcfg-files-macro input="${swat.dp.tools}/soma/xml/empty-config.xml"
                                  output="dist/import/${swat.env.name}/import.xml"
                                  xcfg-selection-expr="${xcfg-selection-expr}" />

        <!-- Step 4: Create the object list from the import file, see split.xml -->
        <echo message="Step 4: Create the object list from the import file" />
        <extract-object-list-macro input="dist/import/${swat.env.name}/import.xml"
                                   output="dist/import/${swat.env.name}/import-object-list.xml" />

        <!-- Step 5: Filter the export with the content of the import -->
        <echo message="Step 5: Filter the export with the content of the import" />
        <filter-with-object-list-macro input="dist/download/domain-export/export.xml"
                                       output="dist/cleanup/${foreach.device.name}-${swat.env.name}-export-filtered.xml"
                                       object-list="../../../${ant.project.name}/dist/import/${swat.env.name}/import-object-list.xml" />

        <!-- Step 6: Create a delete object request from the filtered export file -->
        <echo message="Step 6: Create a delete object request from the filtered export file" />
        <create-delete-object-list-request-macro input="dist/cleanup/${foreach.device.name}-${swat.env.name}-export-filtered.xml"
                                                 output="dist/cleanup/${foreach.device.name}-${swat.env.name}-config-delete.xml" />

        <!-- Step 7: Check whether there are any objects to delete -->
        <echo message="Step 7: Check whether there are any objects to delete" />
        <extract-xpath-macro input-file="dist/cleanup/${foreach.device.name}-${swat.env.name}-config-delete.xml"
                             xpath="count(//*[local-name()='del-config']/*)"
                             property-name="numObjects" />
        <if>
            <equals arg1="${numObjects}" arg2="0" />
            <then>
                <!-- Step 8: No objects to be deleted, continue -->
                <echo message="Step 8: No objects to be deleted for [${swat.domain.name}/${device.label}], continue." />
            </then>
            <else>
                <!-- Step 8: Confirm the deletion of the objects (ant-form) -->
                <echo message="Step 8: Confirm the deletion of the objects (ant-form)" />
                <dialog-confirm-macro title="Cleanup Objects [${swat.domain.name}/${device.label}]"
                                      label="Are you sure, you want to delete the identified objects in Domain [${swat.domain.name}] on Device [${device.label}]?"
                                      content="Please view the file ${basedir}/dist/cleanup/${foreach.device.name}-${swat.env.name}-config-delete.xml for the detailed content."
                                      fail-message="Objects will not be deleted, action cancelled by user." />

                <!-- Step 9: Run the delete object request against the chosen device (no preparation necessary) -->
                <echo message="Step 9: Run the delete object request against the chosen device" />
                <soma-run-single-request-on-single-device-macro device="${foreach.device.name}"
                                                                soma.request="${foreach.device.name}-${swat.env.name}-config-delete"
                                                                tmp.dir="cleanup"
                                                                check.response="true" />
            </else>
        </if>
    </target>

    <!-- ================================= 
          target: 25-domain-checkpoints 
         ================================= -->
    <target name="25-domain-checkpoints"
            depends="declare,init,load-domain-props"
            description="Get domain checkpoints of a given device.">
        <!-- Load implicitly chosen device-set settings -->
        <load-device-set-props-macro device-set="${swat.device-set.name}" />
        <foreach target="get-domain-checkpoints-on-device"
                 list="${swat.device.list}"
                 delimiter=","
                 param="mgr.target.device.name"
                 inheritall="true"
                 inheritrefs="true" />
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: get-domain-checkpoints-on-device                      
         - - - - - - - - - - - - - - - - - -->
    <target name="get-domain-checkpoints-on-device" depends="declare,load-domain-props">
        <get-status-macro device="${mgr.target.device.name}"
                          domain="${swat.domain.name}"
                          status="DomainCheckpointStatus" />
    </target>

    <!-- ================================= 
          target: 26-domain-password-alias-deploy 
         ================================= -->
    <target name="26-domain-password-alias-deploy" depends="declare,load-domain-props">

        <!-- Present Password Alias dialog if one of the mandatory fields is not set -->
        <if>
            <or>
                <not>
                    <isset property="password.alias.name" />
                </not>
                <not>
                    <isset property="password.alias.comment" />
                </not>
                <not>
                    <isset property="password.alias.secret" />
                </not>
            </or>
            <then>
                <dialog-password-alias-macro title="Deploy Password Map Alias on domain ${swat.domain.name}" />
            </then>
        </if>
        <if>
            <not>
                <isset property="password.alias.overwrite" />
            </not>
            <then>
                <property name="password.alias.overwrite" value="false" />

            </then>
        </if>

        <add-password-alias-macro env="${mgr.target.env.name}"
                                  domain="${swat.domain.name}"
                                  alias="${password.alias.name}"
                                  comment="${password.alias.comment}"
                                  password="${password.alias.secret}"
                                  overwrite="${password.alias.overwrite}" />
    </target>

    <!-- ================================= 
          target: 27-domain-artifact              
         ================================= -->
    <target name="27-domain-artifact" depends="declare,load-domain-props">

        <!-- Step 1: Pack all services -->
        <echo message="Step 1: Pack all services into one import file" />
        <delete dir="dist/import/${swat.env.name}/${swat.domain.name}" />
        <foreach target="domain-pack-service"
                 list="${swat.service.list}"
                 delimiter=","
                 param="mgr.target.service.name"
                 inheritall="true"
                 inheritrefs="true" />

        <!-- Step 2: -->
        <!-- Pack the service for the environment -->
        <echo message="- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" />
        <echo message="Step 2:  ..." />
        <property name="relative-import-dir" value="dist/import/${swat.env.name}/${swat.domain.name}" />
        <property name="import-dir" value="${basedir}/${relative-import-dir}" />
        <property name="files-dir" value="${import-dir}/master/common" />
        <property name="xcfg-dir" value="${import-dir}/xcfg/common" />
        <property name="pack-dir" value="${import-dir}/pack" />
        <property name="zip-dir" value="${basedir}/dist" />
        <property name="service.summary" value="env: ${swat.env.name} - services: ${swat.service.list}" />

        <!-- verify that all tokens within the files have been replaced -->
        <verify-token-replacement-macro src-dir="${files-dir}" />

        <!-- create files.xml -->
        <createfilesconfig env="${swat.env.name}"
                           createDpConfig="true"
                           domain="${swat.domain.name}"
                           comment="${service.summary}"
                           targetdir="${import-dir}"
                           targetfile="files.xml">
            <fileset dir="${files-dir}">
                <include name="**/*" />
                <exclude name="**/*.xcfg" />
                <exclude name="**/README" />
                <exclude name="**/readme.txt" />
            </fileset>
        </createfilesconfig>

        <!-- validating public keys i.e certificates if there are any -->
        <validate-certs-macro source-dir="${files-dir}" />

        <!-- run schema validation on xcfg files -->
        <validate-config-macro source-dir="${relative-import-dir}/xcfg/common" />

        <!-- Combine the file files.xml and the additional .xcfg files into one 
            export file -->
        <combine-xcfg-files-macro input="${import-dir}/files.xml"
                                  output="${import-dir}/export.xml"
                                  xcfg-selection-expr="file:///${basedir}/${relative-import-dir}/xcfg/common/?select=*.xcfg" />
        <delete file="${import-dir}/files.xml" />

        <!-- Verify, that replacement tokens are all good -->
        <verify-filter-xcfg-files-macro src-file="${import-dir}/export.xml" />

        <!-- Pack the content to prepare for the final zip-file -->
        <echo message="Copying to pack the zip-file..." />
        <copy todir="${pack-dir}" filtering="false" verbose="true" overwrite="true">
            <fileset dir="${files-dir}" />
            <fileset dir="${import-dir}">
                <filename name="export.xml" />
            </fileset>
        </copy>

        <!-- define artifact name -->
        <if>
            <and>
                <isset property="swat.settings.domain.artifact.datestamp" />
                <istrue value="${swat.settings.domain.artifact.datestamp}" />
            </and>
            <then>
                <tstamp>
                    <format property="DATESTAMP" pattern="yyyyMMdd" />
                </tstamp>
                <property name="domain.artifact.filename"
                          value="domain-${swat.domain.name}-${swat.env.name}-${DATESTAMP}.zip" />
            </then>
            <else>
                <property name="domain.artifact.filename" value="domain-${swat.domain.name}-${swat.env.name}.zip" />
            </else>
        </if>

        <!-- Pack the final zip-file -->
        <zip destfile="${zip-dir}/${domain.artifact.filename}" basedir="${pack-dir}" />

        <echo message="Done building the import-package for the domain ${swat.domain.name} for environment ${swat.env.name} in folder ${zip-dir}." />
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: domain-pack-service 
         - - - - - - - - - - - - - - - - - -->
    <target name="domain-pack-service" depends="declare,load-service-props">
        <domain-pack-service-macro service="${mgr.target.service.name}" />
    </target>


    <!-- ================================= 
          target: 28-domain-upload-file 
         ================================= -->
    <target name="28-domain-upload-file" depends="declare,load-domain-props">

        <!-- Present File Upload dialog if one of the mandatory fields is not set -->
        <if>
            <or>
                <not>
                    <isset property="uploadfile.source.file" />
                </not>
                <not>
                    <isset property="uploadfile.target.dir" />
                </not>
            </or>
            <then>
                <dialog-upload-file-macro title="Upload file to domain ${swat.domain.name}" />
            </then>
        </if>

        <upload-file-macro env="${mgr.target.env.name}"
                           domain="${swat.domain.name}"
                           source.file="${uploadfile.source.file}"
                           target.dir="${uploadfile.target.dir}" />
    </target>

    <!-- ================================= 
          target: 29-domain-delete-file 
         ================================= -->
    <target name="29-domain-delete-file" depends="declare,load-domain-props">

        <!-- Present File Deletion dialog if one of the mandatory fields is not set -->
        <if>
            <or>
                <not>
                    <isset property="deletefile.path" />
                </not>
            </or>
            <then>
                <dialog-single-property-macro title="Delete file to domain ${swat.domain.name}"
                                              property="deletefile.path"
                                              label="DataPower File:" />
            </then>
        </if>

        <delete-file-macro env="${mgr.target.env.name}" domain="${swat.domain.name}" path="${deletefile.path}" />
    </target>

    <!-- ================================= 
          target: 30-domain-service-quiesce              
         ================================= -->
    <target name="30-domain-service-quiesce"
            depends="declare,init,load-domain-props"
            description="--> quiesce a service on the given device-set associated with the selected environment.">

        <!-- Confirm if productive environment -->
        <dialog-confirm-productive-macro function="Service-Quiesce" lbl-spec="Environment: ${mgr.target.env.name}" />

        <!-- Deploy the service on the device-set associated with this environment -->
        <service-quiesce-macro env="${mgr.target.env.name}" />

        <stringutil string="${service.name} - ${FILESTAMP}${line.separator}${mgr.target.env.name} - ${domain.name}"
                    property="msgbox">
            <messagebox title="${ant.project.name}" />
        </stringutil>
        <echo>${msgbox}</echo>
    </target>

</project>