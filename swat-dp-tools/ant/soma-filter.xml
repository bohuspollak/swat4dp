<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Copyright © 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.soma-filter" default="info" basedir=".">

	<dirname file="${ant.file.swat-dp-tools.soma-filter}" property="ant_somafilter.dir" />
	<import file="${ant_somafilter.dir}/taskdefs.xml" />

	<!-- ================================= 
          target: info              
         ================================= -->
	<target name="info">
		<echo message="Macros for soma filter for swat-dp-tools" />
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: soma-define-content-filter-macro         
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="soma-define-content-filter-macro">
		<attribute name="filter" />
		<attribute name="exists" />
		<attribute name="dir" />
		<attribute name="file" />
		<attribute name="encoded" />
		<attribute name="type" />
		<attribute name="tmp.dir" />
		<attribute name="dry-run" />
		<attribute name="overwrite.objects" />
		<attribute name="overwrite.files" />
		<sequential>
			<local name="soma.content" />
			<if>
				<equals arg1="@{exists}" arg2="true" />
				<then>
					<echo message="preparing content '@{dir}/@{file}' ..." />
					<available file="@{dir}" property="dir.exists" type="dir" />
					<fail unless="dir.exists" message="The specified content directory '@{dir}'does not exist!" />
					<available file="@{dir}/@{file}" property="file.exists" type="file" />
					<fail unless="file.exists" message="The specified content file '@{dir}/@{file}' does not exist!" />
					<if>
						<isfalse value="@{encoded}" />
						<then>
							<!-- Encode the file -->
							<base64-encode-macro infile="@{dir}/@{file}" outfile="dist/@{tmp.dir}/@{file}.b64" />
							<!-- LoadFile for the b64 encoded file -->
							<loadfile property="soma.content" srcfile="dist/@{tmp.dir}/@{file}.b64" />
						</then>
						<else>
							<loadfile property="soma.content" srcfile="@{dir}/@{file}" />
						</else>
					</if>
					<filterset id="@{filter}">
						<!-- Content -->
						<filter token="soma.content" value="${soma.content}" />
						<filter token="soma.content.type" value="@{type}" />
						<filter token="soma.dry.run" value="@{dry-run}" />
						<filter token="soma.overwrite.files" value="@{overwrite.files}" />
						<filter token="soma.overwrite.objects" value="@{overwrite.objects}" />
					</filterset>
				</then>
				<else>
					<filterset id="@{filter}" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: soma-define-file-filter-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="soma-define-file-filter-macro">
		<attribute name="filter" />
		<attribute name="file.name" />
		<attribute name="dp.file.name" />
		<sequential>
			<!-- Depending on the file settings, define the device-specific filter -->
			<if>
				<and>
					<equals arg1="@{file.name}" arg2="none" />
					<equals arg1="@{dp.file.name}" arg2="none" />
				</and>
				<then>
					<!-- No file set, define the empty filterset -->
					<filterset id="@{filter}" />
				</then>
				<else>
					<!-- Define the File Filter (for both, even though, one might be none) -->
					<filterset id="@{filter}" onmissingfiltersfile="ignore">
						<!-- File settings -->
						<filter token="file.name" value="@{file.name}" />
						<filter token="dp.file.name" value="@{dp.file.name}" />
					</filterset>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: soma-define-device-filter-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="soma-define-device-filter-macro">
		<attribute name="filter" />
		<attribute name="device" />
		<sequential>
			<!-- Depending on the device setting, define the device-specific filter -->
			<if>
				<equals arg1="@{device}" arg2="none" />
				<then>
					<!-- No device set, define the empty filterset -->
					<filterset id="@{filter}" />
				</then>
				<else>
					<!-- Define the Device Filter -->
					<filterset id="@{filter}" onmissingfiltersfile="ignore">
						<!-- Device settings (note: we are working in the default domain, if we are in device mode) -->
						<filtersfile file="config/@{device}.properties" />
					</filterset>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: soma-define-env-filter-macro         
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="soma-define-env-filter-macro">
		<attribute name="filter" />
		<attribute name="env" />
		<sequential>
			<!-- Depending on the env setting, define the env-specific filter -->
			<if>
				<equals arg1="@{env}" arg2="none" />
				<then>
					<!-- No env set, define the empty filterset -->
					<filterset id="@{filter}" />
				</then>
				<else>
					<!-- Define the Env Filter -->
					<echo message="env filter = config/@{env}.properties" />
					<filterset id="@{filter}" onmissingfiltersfile="ignore">
						<!-- Env settings  -->
						<filtersfile file="config/@{env}.properties" />
					</filterset>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: soma-define-crypto-filter-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="soma-define-crypto-filter-macro">
		<attribute name="filter" />
		<attribute name="crypto.prefix" />
		<sequential>
			<!-- Depending on the crypto.prefix, determine the correct crypto properties for the filter -->
			<if>
				<equals arg1="@{crypto.prefix}" arg2="none" />
				<then>
					<!-- No crypto.prefix set, define the empty filterset -->
					<filterset id="@{filter}" />
				</then>
				<elseif>
					<equals arg1="@{crypto.prefix}" arg2="device-id" />
					<then>
						<propertycopy name="local.crypto.cn" from="@{crypto.prefix}.cn" />
						<!-- Define the Device Crypto Filter -->
						<filterset id="@{filter}" onmissingfiltersfile="ignore">
							<!-- Specific Device Crypto -->
							<filter token="crypto.cn" value="${local.crypto.cn}" />
							<filter token="crypto.object.name" value="device-id" />
							<!-- Common Device Crypto -->
							<filtersfile file="${swat.dp.infra}/config/device-crypto.properties" />
						</filterset>
					</then>
				</elseif>
				<else>
					<propertycopy name="local.crypto.cn" from="@{crypto.prefix}.cn" />
					<if>
						<isset property="@{crypto.prefix}.object.name" />
						<then>
							<propertycopy name="local.crypto.object.name" from="@{crypto.prefix}.object.name" />
						</then>
						<else>
							<property name="local.crypto.object.name" value="${local.crypto.cn}" />
						</else>
					</if>

					<!-- Define the Crypto Filter -->
					<echo message="crypto filter = ${swat.dp.infra}/config/crypto.properties" />
					<filterset id="@{filter}" onmissingfiltersfile="ignore">
						<!-- Specific Crypto -->
						<filter token="crypto.cn" value="${local.crypto.cn}" />
						<filter token="crypto.object.name" value="${local.crypto.object.name}" />
						<!-- Common Crypto -->
						<filtersfile file="${swat.dp.infra}/config/crypto.properties" />
					</filterset>
				</else>
			</if>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: soma-define-custom-filter-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="soma-define-custom-filter-macro">
		<attribute name="filter" />
		<attribute name="custom.filter" />
		<sequential>
			<!-- Depending on the custom setting, define the custom filter -->
			<if>
				<equals arg1="@{custom.filter}" arg2="none" />
				<then>
					<!-- No custom filter set, define the empty filterset -->
					<filterset id="@{filter}" />
				</then>
				<else>
					<!-- Define the custom Filter -->
					<filterset id="@{filter}" onmissingfiltersfile="ignore">
						<!-- Custom settings -->
						<filterset refid="@{custom.filter}" />
					</filterset>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: soma-define-filter-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="soma-define-filter-macro">
		<attribute name="filter" />
		<attribute name="domain" />
		<attribute name="deployment.policy" />
		<attribute name="content.filter" />
		<attribute name="file.filter" />
		<attribute name="device.filter" />
		<attribute name="env.filter" />
		<attribute name="crypto.filter" />
		<attribute name="custom.filter" />
		<sequential>
			<filterset id="@{filter}" onmissingfiltersfile="ignore">
				<!-- Build-Properties Files -->
				<filtersfile file="build.properties" />
				<filtersfile file="${swat.dp.infra}/build.properties" />

				<!-- Set the domain name we are working on -->
				<filter token="domain.name" value="@{domain}" />

				<!-- Set the deployment policy, if any -->
				<filter token="deployment.policy" value="@{deployment.policy}" />

				<!-- Append the content filterset -->
				<filterset refid="@{content.filter}" />
				<!-- Append the file filterset -->
				<filterset refid="@{file.filter}" />
				<!-- Append the device filterset -->
				<filterset refid="@{device.filter}" />
				<!-- Append the env filterset -->
				<filterset refid="@{env.filter}" />
				<!-- Append the crypto filterset -->
				<filterset refid="@{crypto.filter}" />
				<!-- Append the custom filterset -->
				<filterset refid="@{custom.filter}" />
			</filterset>
		</sequential>
	</macrodef>
</project>