<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Copyright © 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.tokenize" default="info" basedir=".">

	<dirname file="${ant.file.swat-dp-tools.tokenize}" property="ant_tokenize.dir" />
	<import file="${ant_tokenize.dir}/taskdefs.xml" />

	<target name="info">
		<echo message="Macros for config tokenization for swat-dp-tools" />
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: tokenize-configuration-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="tokenize-configuration-macro">
		<attribute name="env" />
		<attribute name="device" />
		<attribute name="domain" />
		<attribute name="service" />
		<attribute name="object" />
		<attribute name="class" />

		<sequential>

			<property name="src-dir" value="dist/export/@{device}-@{domain}/xcfg/common" />

			<fail message="Source directory dist/export/@{device}-@{domain}/xcfg/common does not exist!">
				<condition>
					<not>
						<available file="${src-dir}" type="dir" />
					</not>
				</condition>
			</fail>

			<echo message="populate xcfg files with tokens ..." />

			<property name="tokenizer-tmp-dir" value="dist/tokenizer-tmp" />
			<property name="tokenized-dir" value="dist/tokenized/@{device}-@{domain}" />

			<mkdir dir="${tokenizer-tmp-dir}" />

			<xmltask todir="${tokenizer-tmp-dir}"
			         outputter="simple:3"
			         preservetype="true"
			         omitheader="true"
			         encoding="UTF-8">
				<fileset dir="${src-dir}" id="xcfg">
					<include name="*.xcfg" />
					<exclude name="temp-*.xcfg" />
					<exclude name="*-intrinsic.xcfg" />
				</fileset>

				<replace path="//export-details/user/text()" withText="@env.user@" />
				<replace path="//export-details/current-date/text()" withText="@current.date@" />
				<replace path="//export-details/current-time/text()" withText="@current.time@" />
				<replace path="//export-details/domain/text()" withText="@domain.name@" />

				<!-- general settings -->
				<replace path="//configuration/@domain" withText="@domain.name@" />

				<!-- crypto objects -->
				<regexp path="//configuration/CryptoKey//@name"
				        if="crypto.cn"
				        pattern="${crypto.cn}"
				        replace="@crypto.cn@" />
				<regexp path="//configuration/CryptoKey/Filename/text()"
				        if="crypto.cn"
				        pattern="(.*)${crypto.cn}(.*)"
				        replace="$1@crypto.cn@$2" />
				<regexp path="//configuration/CryptoCertificate//@name"
				        if="crypto.cn"
				        pattern="${crypto.cn}"
				        replace="@crypto.cn@" />
				<regexp path="//configuration/CryptoCertificate/Filename/text()"
				        if="crypto.cn"
				        pattern="(.*)${crypto.cn}(.*)"
				        replace="$1@crypto.cn@$2" />
				<regexp path="//configuration/CryptoIdentCred//@name"
				        if="crypto.cn"
				        pattern="${crypto.cn}"
				        replace="@crypto.cn@" />
				<regexp path="//configuration/CryptoIdentCred//text()"
				        if="crypto.cn"
				        pattern="${crypto.cn}"
				        replace="@crypto.cn@" />
				<regexp path="//configuration/CryptoProfile/IdentCredential/text()"
				        if="crypto.cn"
				        pattern="${crypto.cn}"
				        replace="@crypto.cn@" />

				<!-- service settings -->
				<regexp path="//configuration//text()"
				        pattern="${service.object.name}(.*)"
				        replace="@service.object.name@$1" />
				<regexp path="//configuration//@name"
				        pattern="${service.object.name}(.*)"
				        replace="@service.object.name@$1" />
				<regexp path="//configuration//text()" pattern="${service.dir}(.*)" replace="@service.dir@$1" />
				
				<replace path="//configuration/${service.object.class}/DebugMode/text()" withText="@debug.mode@" />
				<replace path="//configuration/${service.object.class}/DebugHistory/text()"
				         withText="@debug.history@" />

				<!-- WAF objects -->
				<replace path="//configuration/WebAppFW/FrontSide/LocalAddress/text()"
				         withText="@frontend.server.host@" />
				<replace path="//configuration/WebAppFW/FrontSide/LocalPort/text()" withText="@frontend.server.port@" />
				<replace path="//configuration/WebAppFW/RemoteAddress/text()" withText="@backend.server.host@" />
				<replace path="//configuration/WebAppFW/RemotePort/text()" withText="@backend.server.port@" />
				<replace path="//configuration/WebAppFW/FrontTimeout/text()" withText="@frontend.timeout@" />
				<replace path="//configuration/WebAppFW/BackTimeout/text()" withText="@backend.timeout@" />
				<replace path="//configuration/WebAppFW/FrontPersistentTimeout/text()"
				         withText="@frontend.timeout.persistent@" />
				<replace path="//configuration/WebAppFW/BackPersistentTimeout/text()"
				         withText="@backend.timeout.persistent@" />

				<!-- AAA -->
				<replace path="//configuration/AAAPolicy/Authenticate/AULTPAKeyFile[text()!='']/text()"
				         withText="@ltpa.keys.file@" />
				<replace path="//configuration/AAAPolicy/Authenticate/AULTPAKeyFilePassword[text()!='']/text()"
				         withText="@ltpa.was7.keys.pw@" />
				<replace path="//configuration/AAAPolicy/Authenticate/AUCacheAllow/text()"
				         withText="@auth.cache.allow@" />
				<replace path="//configuration/AAAPolicy/Authenticate/AUCacheTTL/text()" withText="@auth.cache.ttl@" />

				<replace path="//configuration/AAAPolicy/Authorize/AZLDAPBindPassword/text()"
				         if="ldap.dmz.bind.pw.lbl"
				         withText="@ldap.dmz.bind.pw@" />

				<replace path="//configuration/AAAPolicy/PostProcess/PPLTPAKeyFile[text()!='']/text()"
				         withText="@ltpa.keys.file@" />
				<replace path="//configuration/AAAPolicy/PostProcess/PPLTPAKeyFilePassword[text()!='']/text()"
				         withText="@ltpa.was7.keys.pw@" />
				<replace path="//configuration/AAAPolicy/PostProcess/PPLTPAExpiry/text()"
				         if="ltpa.expiry"
				         withText="@ltpa.expiry@" />


				<!-- Log Targets -->
				<replace path="//configuration/LogTarget[@name = '${service.object.name}']/@name" withText="@service.object.name@" />
				<replace path="//configuration/LogTarget[@name = '${service.object.name}']/UserSummary/text()"
				         withText="LogTarget for the @service.object.name@ @service.object.class@" />
				<replace path="//configuration/LogTarget/LogEvents[Class='all']/Priority/text()"
				         withText="@log.level.general@" />
				<replace path="//configuration/LogTarget/Size/text()" withText="@log.file.size@" />
				<replace path="//configuration/LogTarget/Rotate/text()" withText="@log.file.rotations@" />
				<replace path="//configuration/LogTarget/LogObjects[Class='${service.object.class}']/FollowReferences/text()"
				         withText="@log.service.follow-refs@" />
				<replace path="//configuration/LogTarget/LogObjects[Class='${service.object.class}']/Class/text()"
				         withText="@service.object.class@" />


				<!-- remove some export details -->
				<remove path="//export-details/reset-date" />
				<remove path="//export-details/reset-time" />
				<remove path="//export-details/login-message" />
				<remove path="//export-details/custom-ui-file" />

			</xmltask>

			<!-- reorder attributes for manual comparison -->
			<xcfg-reformat-macro src-dir="${tokenizer-tmp-dir}" dst-dir="${tokenized-dir}" conf-type="service" />
			
			<!-- fix end of line encoding for the current environment -->
			<fixcrlf srcdir="${tokenized-dir}"
			         includes="**/*.xcfg" />

				
			<delete dir="${tokenizer-tmp-dir}" failonerror="true" />
			<echo message="@{service} configuration for @{device}/@{domain} has been tokenized." />

		</sequential>
	</macrodef>
</project>