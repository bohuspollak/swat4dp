<?xml version="1.0" encoding="UTF-8"?>

<!-- ============================================================================================== -->
<!-- Pierce's DataPower Administration Toolkit (P'DAT) for IBM WebSphere DataPower SOA appliances -->
<!-- ============================================================================================== -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above.        -->
<!-- ====================================================================== -->

<project name="swat-dp-management"
         default="info"
         basedir="."
         xmlns:dp="antlib:com.myarch.datapower">

	<description>DataPower management project based on Myarch dpbuddy, IBM's WAMT and on custom ANT tasks.</description>

	<property environment="env" />

	<!-- ====================================================================== -->
	<!-- Import maven-build.xml into the current project                        -->
	<!-- ====================================================================== -->
	<import file="${basedir}/maven-build.xml" />

	<!-- ====================================================================== -->
	<!-- Import property files                                                  -->
	<!-- ====================================================================== -->

	<!-- Get global properties from build.properties -->
	<property file="build.properties" />

	<!-- Get user specific properties from <user.properties.file> -->
	<property file="${user.properties.file}" />

	<!-- File with DataPower connection information, such as URL, username -->
	<loadproperties srcFile="dp.properties" />

	<!-- ====================================================================== -->
	<!-- Help target                                                            -->
	<!-- ====================================================================== -->

	<target name="help">
		<echo message="Administration Toolkitfor IBM WebSphere DataPower SOA appliances" />
		<echo message="Please run: $ant -projecthelp" />
	</target>

	<target name="declare">

		<!-- define the classpath for the additional tasks -->
		<path id="dp.tools.classpath">
			<pathelement location="${project.build.outputDirectory}" />
			<path refid="build.classpath" />
		</path>

		<!-- Task Definitions -->
		<!-- declare antcontrib tasks -->
		<taskdef resource="net/sf/antcontrib/antlib.xml"
		         classpathref="dp.tools.classpath" />

		<!-- declarre xml tasks -->
		<taskdef name="xmltask"
		         classname="com.oopsconsultancy.xmltask.ant.XmlTask"
		         classpathref="dp.tools.classpath" />

		<!-- antform tasks -->
		<taskdef resource="com/sardak/antform/taskdefs.properties"
		         classpathref="dp.tools.classpath" />

		<!-- myarch dpbuddy tasks -->
		<!-- uri has to match the uri of the dp namespace prefix -->
		<taskdef uri="antlib:com.myarch.datapower"
		         resource="com/myarch/datapower/antlib.xml"
		         classpathref="dp.tools.classpath">
		</taskdef>

		<!-- string util tasks -->
		<taskdef name="stringutil"
		         classname="ise.antelope.tasks.StringUtilTask"
		         classpathref="dp.tools.classpath" />

		<!-- srsx tasks -->
		<taskdef resource="ch/srsx/tools/ant/antlib.xml"
		         classpathref="dp.tools.classpath">
		</taskdef>
		<taskdef resource="ch/srsx/swat/datapower/tools/ant/antlib.xml"
		         classpathref="dp.tools.classpath">
		</taskdef>

		<!-- declare additional tasks that come with this project -->
		<typedef name="securebackup"
		         classname="ch.srsx.swat.datapower.wamt.ant.taskdefs.SecureBackup"
		         classpathref="dp.tools.classpath" />
		<typedef name="securerestore"
		         classname="ch.srsx.swat.datapower.wamt.ant.taskdefs.SecureRestore"
		         classpathref="dp.tools.classpath" />

		<typedef name="wsdlstats"
		         classname="ch.srsx.swat.datapower.dpbuddy.ant.taskdefs.DownloadWebServicesOperationMetrics"
		         classpathref="dp.tools.classpath" />
		<typedef name="filemgmt"
		         classname="ch.srsx.swat.datapower.dpbuddy.ant.taskdefs.FileManagement"
		         classpathref="dp.tools.classpath" />
		<typedef name="download"
		         classname="ch.srsx.swat.datapower.dpbuddy.ant.taskdefs.DownloadFile"
		         classpathref="dp.tools.classpath" />

	</target>

	<!-- ============== -->
	<!-- Initialization -->
	<!-- ============== -->
	<target name="init" depends="declare">
		<!-- Create the time stamp -->
		<tstamp>
			<format property="FILESTAMP" pattern="yyyyMMdd_HHmmss" />
		</tstamp>

		<!-- Get global environment properties -->


		<!-- DEFAULT values -->
		<!-- Set property log4j.root.level to the regexp '\2' if not yet set within build.properties file -->
		<property name="log4j.root.level" value="\2" />
		<!-- Set property work.dir if not yet set in build.properties -->
		<property name="work.dir" value="${user.dir}" />
		<!-- Set compiler properties if not yet set in build.properties -->
		<property name="compiler.type" value="full" />
		<property name="compiler.debug" value="true" />

		<xmlproperty file="pom.xml" />

		<xmlcatalog id="dtds">
			<dtd publicId="log4j:configuration"
			     location="${maven.build.resourceDir.0}/log4j.dtd" />
		</xmlcatalog>

		<property name="xsl.dir" value="${basedir}/src/main/xsl" />
		<property name="trans" value="${xsl.dir}/wsdl-viewer.xsl" />
		<property name="target.html" value="${maven.build.dir}/wsdl-doc" />
		<property name="wsdl.dir" value="${basedir}/tmp/wsdl" />

		<mkdir dir="${wsdl.dir}" />

		<!-- Environment prefix refers to a group of the DataPower properties defined with this prefix
			 See dp.properties for an example. This value will be used by all tasks in this build file unless it's
			 overridden at a task level using envPrefix attribute -->
		<!--property name="dp.env.prefix" value="dev" /-->

	</target>

	<!-- ================================= 
          target: info              
         ================================= -->
	<target name="info" depends="init" description="show project information">
		<echo message="==============================================================================================" />
		<echo message="Pierce's DataPower WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances" />
		<echo message="NOTE: You need IBM's WAMT library (latest version) and MyArch's free dpbuddy version (2.3.1)!" />
		<echo message="==============================================================================================" />
		<!-- Displays the properties for this run -->
		<echo message="OS=${os.name}" />
		<echo message="JDK=${ant.java.version}" />
		<echo message="${ant.version}" />
		<echo message="build file=${ant.file}" />
		<echo message="project=${ant.project.name}" />
		<echo message="working directory=${work.dir}" />
		<echo message="" />

		<echo message="********************************************" />
		<echoproperties prefix="maven.build" />
		<echoproperties prefix="project" />
		<echo message="--------------------------------------------" />
		<echoproperties prefix="env" />
		<echo message="--------------------------------------------" />
		<echoproperties prefix="dp" />

		<echo message="********************************************" />
		<!-- Format path -->
		<echo message="dp.tools.classpath :" />
		<pathconvert pathsep="${line.separator}"
		             property="echo.tools.classpath"
		             refid="dp.tools.classpath" />
		<echo message="${echo.tools.classpath}" />
	</target>

	<!-- ================================= 
	          target: direct-deployment     
	     ================================= -->
	<target name="deploy"
	        depends="init"
	        description="--> deploy DataPower configuration">
		<property name="version" value="${project.version}" />

		<antform title="DataPower Deployment">
			<label>Provide version, preifx, user name and password in order to to a deployment.</label>
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<fileSelectionProperty label="Select the config file : "
			                       property="deploy.config"
			                       tooltip="Name of the config file to be uploaded." />
			<booleanProperty label="Overwrite Files?"
			                 property="deploy.overwritefiles"
			                 tooltip="overwrite existing files" />
			<booleanProperty label="Overwrite Objects?"
			                 property="deploy.overwriteobjects"
			                 tooltip="overwrite existing objects" />
			<booleanProperty label="Skip Common Crypto Objects?"
			                 property="deploy.skipcrypto"
			                 tooltip="ignore all common crypto objects" />
			<booleanProperty label="Dry Run?"
			                 property="deploy.dryrun"
			                 tooltip="do not commit the import" />


			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<if>
			<istrue value="${deploy.skipcrypto}" />
			<then>
				<dp:import file="${deploy.config}"
				           overwriteFiles="${deploy.overwritefiles}"
				           overwriteObjects="${deploy.overwriteobjects}"
				           deploymentPolicyName="SkipCommonCryptoObjects"
				           dryRun="${deploy.dryrun}" />
			</then>

			<else>
				<dp:import file="${deploy.config}"
				           overwriteFiles="${deploy.overwritefiles}"
				           overwriteObjects="${deploy.overwriteobjects}"
				           dryRun="${deploy.dryrun}" />
			</else>

		</if>

	</target>


	<!-- ================================= 
          target: save-config              
         ================================= -->
	<target name="save-config"
	        depends="init"
	        description="save the running configuration">

		<antform title="DataPower Deployment">
			<label>Save the running application domain configuration.</label>
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<dp:save />

	</target>


	<!-- ================================= 
          target: exportConfig              
         ================================= -->
	<target name="exportConfig"
	        depends="init"
	        description="export running configuration">


		<property name="export.filename" value="${export.dir}/myexport.xml" />

		<antform title="DataPower Configuration Management">
			<label>Export configuration.</label>
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<textProperty label="Name patterns : "
			              property="export.namepatterns"
			              tooltip="Comma-delimited list of regular expression patterns." />
			<textProperty label="File name : "
			              property="export.filename"
			              tooltip="Name of the file to save the exported configuration to." />
			<booleanProperty label="all files?"
			                 property="export.allfiles"
			                 tooltip="If set to true, export all local files." />
			<booleanProperty label="persisted?"
			                 property="export.persisted"
			                 tooltip="If set to true, export only the persisted configuration." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />
		
		<dp:status class="DomainStatus" domain="default"/>

		<fail />
		<!-- You can simply list regexps defining objects that you want to export without worrying about their types (classes) -->

		<dp:export file="${export.filename}"
		           namePatterns="${export.namepatterns}"
		           persisted="${export.persisted}"
		           allFiles="${export.allfiles}"
		           >
		</dp:export>
	</target>


	<!-- ================================= 
          target: exportObject              
         ================================= -->
	<target name="exportObject"
	        depends="init"
	        description="export a object from the running configuration">

		<antform title="DataPower Configuration Management">
			<label>Export object.</label>
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<selectionproperty label="Application domain : "
			                   property="dp.domain"
			                   values="${dp.domains}" />
			<textProperty label="Object name : "
			              property="export.object.name"
			              tooltip="Name of the object to be exported." />
			<textProperty label="Class name : "
			              property="export.class.name"
			              tooltip="Name of the object class i.e. object type." />
			<selectionproperty label="Export type"
			                   property="export.type"
			                   values="xml,zip"
			                   tooltip="Specify the target file type of the export." />
			<booleanProperty label="Include all files referenced by this object?"
			                 property="export.reffiles"
			                 tooltip="If set to true, export all referenced files." />
			<booleanProperty label="Include referenced/required objects?"
			                 property="export.refobjects"
			                 tooltip="If set to true, export all referenced objects." />
			<booleanProperty label="persisted?"
			                 property="export.persisted"
			                 tooltip="If set to true, export only the persisted configuration." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<property name="export.filename"
		          value="${export.dir}/${export.object.name}-${export.class.name}.${export.type}" />

		<!-- You can simply list regexps defining objects that you want to export without worrying about their types (classes) -->

		<dp:export file="${export.filename}"
		           persisted="${export.persisted}"
		           domain="${dp.domain}">
			<exportobject class="${export.class.name}"
			              name="${export.object.name}"
			              reffiles="${export.reffiles}"
			              refobjects="${export.refobjects}"
			              includeDebug="false" />
		</dp:export>
	</target>



	<!-- ================================= 
          target: splitConfig              
         ================================= -->
	<target name="splitConfig"
	        depends="init"
	        description="split an exported configuration">

		<antform title="DataPower Configuration Management">
			<label>Split Configuration.</label>

			<textProperty label="Service name : "
			              property="split.service.name"
			              tooltip="Prefix to be used for the XCFG files." />
			<fileselectionproperty label="Select file"
			                       property="split.file"
			                       tooltip="Specify the configuration file to be splitted." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<if>
			<contains string="${split.file}" substring="zip" />
			<then>
				<sequential>
					<!-- Unpack the zip file -->
					<unzip src="${split.file}"
					       dest="${exports.dir}/object-export-default" />

					<!-- Split the export file -->
					<property name="work-dir"
					          value="${export.dir}/split/${split.service.name}" />
					<delete dir="${work-dir}" />
					<mkdir dir="${work-dir}" />
					<split-export-file-macro xcfg-files-prefix="${split.service.name}"
					                         export-file="${export.dir}/object-export-default/export.xml"
					                         split-dir="${work-dir}" />

				</sequential>
			</then>
			<else>
				<sequential>

					<!-- Split the export file -->
					<property name="work-dir"
					          value="${export.dir}/split/${split.service.name}" />
					<delete dir="${work-dir}" />
					<mkdir dir="${work-dir}" />
					<split-export-file-macro xcfg-files-prefix="${split.service.name}"
					                         export-file="${split.file}"
					                         split-dir="${work-dir}" />

				</sequential>
			</else>
		</if>

	</target>


	<!-- ================================= 
          target: backup              
         ================================= -->
	<target name="backup"
	        depends="init"
	        description="backup one or more domains">
		<property name="backup.filename"
		          value="${export.dir}/backup/backup.zip" />

		<antform title="DataPower Configuration Management">
			<label>Export a complete domain configuration.</label>
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<textProperty label="Domain pattern : "
			              property="backup.domainpattern"
			              tooltip="Comma-delimited list of regular expression patterns defining what domains to back up." />
			<textProperty label="File name : "
			              property="backup.filename"
			              tooltip="Name of the file to save the backup configuration to." />
			<booleanProperty label="persisted?"
			                 property="backup.persisted"
			                 tooltip="If set to true, export only the persisted configuration." />
			<booleanProperty label="append timestamp?"
			                 property="backup.timestamp"
			                 tooltip="If true, automatically append timestamp to the file name. The timestamp has the format 'yyyyMMdd_HHmmss'." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<dp:backup file="${backup.filename}"
		           persisted="${backup.persisted}"
		           domainPatterns="${backup.domainpattern}"
		           appendTimestamp="${backup.timestamp}" />
	</target>


	<!-- ================================= 
          target: securebackup              
         ================================= -->
	<target name="WAMT-securebackup"
	        depends="init"
	        description="creates a secure backup and stores the files on the backup server">

		<antform title="DataPower Configuration Management">
			<label>Secure Backup</label>
			<selectionproperty label="DataPower device :"
			                   property="securebackup.hostname"
			                   values="${dp.hostnames}" />
			<textProperty label="Username : "
			              property="securebackup.username" />
			<textProperty label="Password : "
						              property="securebackup.password"
						              password="true" />
			<fileSelectionProperty label="Seclect target directory : "
			                       property="securebackup.targetdir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the backup files should be stored." />
			<booleanProperty label="include RAID ?"
			                 property="securebackup.includeraid"
			                 tooltip="Whether to include the content of the harddisk array." />
			<booleanProperty label="force overwrite ?"
			                 property="securebackup.forceoverwrite"
			                 tooltip="Overwrite existing files in the target directory." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<fail unless="securebackup.targetdir"
		      message="Secure Backup has been aborted." />

		<securebackup targetBaseDir="${securebackup.targetdir}"
		              hostname="${securebackup.hostname}"
		              username="${securebackup.username}"
					  password="${securebackup.password}"
		              includeRAID="${securebackup.includeraid}"
		              forceOverwrite="${securebackup.forceoverwrite}" />
	</target>


	<!-- ================================= 
          target: securerestore              
         ================================= -->
	<target name="WAMT-securerestore"
	        depends="init"
	        description="restore a device using a secure backup">

		<antform title="DataPower Configuration Management">
			<label>Secure Restore</label>
			<selectionproperty label="DataPower device :"
			                   property="securerestore.hostname"
			                   values="${dp.hostnames}" />
			<textProperty label="Password : "
			              property="securerestore.password"
			              password="true" />
			<fileSelectionProperty label="Seclect source directory : "
			                       property="securerestore.sourcedir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the backup files are stored." />
			<booleanProperty label="validate?"
			                 property="securerestore.validate"
			                 tooltip="If set to true, the backup files will be validated but no restore is performed." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<fail unless="securerestore.sourcedir"
		      message="Secure Restore has been aborted." />

		<securerestore sourceBaseDir="${securerestore.sourcedir}"
		               hostname="${securerestore.hostname}"
		               password="${securerestore.password}"
		               validate="${securerestore.validate}" />
	</target>


	<!-- ================================= 
          target: secureBackup              
         ================================= -->
	<target name="secBackup" depends="init" description="Secure Backup">
		<property name="secbackup.path" value="local:///disk/securebackup" />

		<antform title="DataPower Configuration Management">
			<label>Secure Backup.</label>
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<textProperty label="Target path : "
			              property="secbackup.path"
			              tooltip="Where to store the seucre backup files." />
			<selectionproperty label="include RAID?"
			                   property="secbackup.includeRAID"
			                   tooltip="Whether to include the content of the harddisk array."
			                   values="off,on" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<dp:action domain="default">
			<SecureBackup>
				<cert>DataPowerSecureBackup</cert>
				<destination>${secbackup.path}/${DSTAMP}</destination>
				<include-iscsi>off</include-iscsi>
				<include-raid>${secbackup.includeRAID}</include-raid>
			</SecureBackup>
		</dp:action>

	</target>

	<!-- ================================= 
          target: keygen              
         ================================= -->
	<target name="keygen"
	        depends="declare"
	        description="generate key pairs and a CSR">
		<antform title="DataPower Crypto Tools">
			<label>Generate key pairs (and CSR).</label>
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<textProperty label="Common Name: "
			              property="keygen.cn"
			              tooltip="The CN to be used." />
			<textProperty label="Organisational Unit "
			              property="keygen.ou"
			              tooltip="The OU to be used." />
			<textProperty label="PW Alias: "
			              property="keygen.pwalias"
			              tooltip="The preconfigured Password Alias to be used." />
			<selectionproperty label="Generate objects?"
			                   property="keygen.genobjects"
			                   tooltip="Whether to genrate the corresponding crypto objects."
			                   values="off,on" />
			<booleanproperty label="default domain?"
			                 property="keygen.default"
			                 tooltip="Whether to genrate the key in the default domain." />
			<selectionproperty label="HSM?"
			                   property="keygen.hsm"
			                   tooltip="Whether to genrate the key on the HSM."
			                   values="off,on" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<if>
			<isset property="keygen.default" />
			<then>
				<dp:action domain="default">
					<Keygen>
						<!-- LDAPOrder>off</LDAPOrder -->
						<C>${keygen.c}</C>
						<ST>${keygen.st}</ST>
						<L>${keygen.l}</L>
						<O>${keygen.o}</O>
						<OU>${keygen.ou}</OU>
						<CN>${keygen.cn}</CN>
						<KeyLength>2048</KeyLength>
						<!-- FileName>common-name</FileName -->
						<Days>365</Days>
						<!-- Password>the password</Password -->
						<PasswordAlias>${keygen.pwalias}</PasswordAlias>
						<!-- KwkExportable>on</KwkExportable -->
						<ExportKey>on</ExportKey>
						<GenSSCert>on</GenSSCert>
						<ExportSSCert>on</ExportSSCert>
						<GenObject>${keygen.genobjects}</GenObject>
						<!-- ObjectName>foobar</ObjectName -->
						<!-- HSM>${keygen.hsm}</HSM -->
						<!-- UsingKey>existing key object name</UsingKey -->
					</Keygen>
				</dp:action>
			</then>
			<else>
				<dp:action>
					<Keygen>
						<!-- LDAPOrder>off</LDAPOrder -->
						<C>${keygen.c}</C>
						<ST>${keygen.st}</ST>
						<L>${keygen.l}</L>
						<O>${keygen.o}</O>
						<OU>${keygen.ou}</OU>
						<CN>${keygen.cn}</CN>
						<KeyLength>2048</KeyLength>
						<!-- FileName>common-name</FileName -->
						<Days>365</Days>
						<!-- Password>the password</Password -->
						<PasswordAlias>${keygen.pwalias}</PasswordAlias>
						<!-- KwkExportable>on</KwkExportable -->
						<ExportKey>on</ExportKey>
						<GenSSCert>on</GenSSCert>
						<ExportSSCert>on</ExportSSCert>
						<GenObject>${keygen.genobjects}</GenObject>
						<!-- ObjectName>foobar</ObjectName -->
						<!-- HSM>${keygen.hsm}</HSM -->
						<!-- UsingKey>existing key object name</UsingKey -->
					</Keygen>
				</dp:action>
			</else>
		</if>

	</target>



	<!-- ================================= 
          target: upload              
         ================================= -->
	<target name="upload"
	        depends="init"
	        description="--> upload files to the DataPower device">

		<property name="upload.target.dir" value="local:///" />
		<property name="upload.filefilter" value="**/*" />


		<antform title="DataPower File Uploader">
			<label>Select a directory to be uploaded.</label>
			<fileSelectionProperty label="Directory: "
			                       property="upload.source.dir"
			                       directoryChooser="true" />
			<selectionproperty label="DP base dir : "
			                   property="upload.base.dir"
			                   values="local:///,cert:///,sharedcert:///,pubcert:///" />
			<textProperty label="DP subdirectory: "
			              property="upload.target.dir"
			              editable="true" />

			<booleanProperty label="flatten?"
			                 property="upload.flat"
			                 tooltip="flatten the directory structure" />
			<booleanProperty label="clean?"
			                 property="upload.clean"
			                 tooltip="will automatically delete all files from any directory on the device where we're uploading the files to" />
			<selectionproperty label="Environment : "
			                   property="dp.env"
			                   values="${dp.envs}" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<dp:copy domain="${dp.domain}"
		         cleanDirectories="${upload.clean}"
		         flatten="${upload.flatten}">
			<!-- 
	                dpfileset has the same attributes and nested elements as Ant fileset. 
	                "prefix" defines the root directory on the device.

	                The tasks automatically replicates entire local directory tree (including
	                all directories that have matching files) on the device.
	                'local:' filesystem is the default.
	            -->
			<dpFileset prefix="${upload.base.dir}${upload.target.dir}"
			           dir="${upload.source.dir}"
			           includes="${upload.filefilter}" />

		</dp:copy>

	</target>

	<!-- ================================= 
          target: createCheckpoint              
         ================================= -->
	<target name="createCheckpoint"
	        depends="init"
	        description="create a configuration checkpoint">
		<antform title="DataPower Chekpoint Creation">
			<label>Specify the name of the checkpoint.</label>
			<textProperty label="Name: "
			              property="checkpoint.name"
			              editable="true"
			              tooltip="Note that if the checkpoint with the same name already exists, it will be deleted." />
			<booleanProperty label="append timestamp?"
			                 property="checkpoint.timestamp"
			                 tooltip="If true, append timestamp to the checkpoint name. Use with caution as this could quickly create a large number of checkpoints. The timestamp has the format 'yyyyMMdd_HHmmss'." />
			<selectionproperty label="Environment :"
			                   property="dp.env"
			                   values="${dp.envs}" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>
		<selectDevice dp.env="${dp.env}" />
		<!-- note that if the checkpoint with the same name already exists, it will be deleted -->
		<dp:checkpoint name="${checkpoint.name}"
		               timestamp="${checkpoint.timestamp}" />
	</target>


	<!-- =============================== -->
	<!-- DataPower Troubleshooting Tasks -->
	<!-- =============================== -->


	<!-- ================================= 
          target: ping              
         ================================= -->
	<target name="ping" depends="init" description="ping action">
		<antform title="DataPower Troubleshooting">
			<label>Provide host name or IP address to be pinged.</label>
			<textProperty label="Host : " property="ping.host" />
			<selectionproperty label="Environment : "
			                   property="dp.env"
			                   values="${dp.envs}" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<dp:action>
			<!-- Simply specify action XML within the task -->
			<Ping>
				<!-- you can use Ant properties anywhere in the request -->
				<RemoteHost>${ping.host}</RemoteHost>
			</Ping>
		</dp:action>
	</target>

	<!-- ================================= 
          target: status              
         ================================= -->
	<target name="status"
	        depends="init"
	        description="get device status information">


		<xmlproperty file="${maven.build.resourceDir.0}/stati.xml" />

		<antform title="DataPower Troubleshooting">
			<label>DataPower Status Information.</label>
			<selectionproperty label="Environment : "
			                   property="dp.env"
			                   values="${dp.envs}" />
			<selectionproperty label="Status Type : "
			                   property="status.type"
			                   values="${stati.type}" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<dp:status class="${status.type}" />

	</target>

	<!-- ================================= 
          target: webservicemetrics              
         ================================= -->
	<target name="webservicemetrics"
	        depends="init"
	        description="download the WebServices Operation Metrics">
		<xmlproperty file="${maven.build.resourceDir.0}/stati.xml" />

		<antform title="DataPower Status">
			<label>DataPower Web Services Operation Metrics</label>
			<selectionproperty label="Environment : "
			                   property="dp.env"
			                   values="${dp.envs}" />
			<fileSelectionProperty label="Seclect target directory : "
			                       property="metrics.targetdir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the metrics should be stored." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<wsdlstats targetDir="${metrics.targetdir}"
		           suffix="-${dp.env.prefix}-${FILESTAMP}" />
	</target>

	<!-- ================================= 
          target: filemanagement              
         ================================= -->
	<target name="download"
	        depends="init"
	        description="download files from the device">
		<xmlproperty file="${maven.build.resourceDir.0}/stati.xml" />
		<property name="filestore.targetdir" value="${basedir}" />

		<antform title="DataPower File Management">
			<label>DataPower File Downloader</label>
			<selectionproperty label="Environment : "
			                   property="dp.env"
			                   values="${dp.envs}" />
			<selectionProperty label="Seclect location : "
			                   property="filestore.location"
			                   values="${dp.locations}"
			                   tooltip="Name of the base directory on the DataPower aka file store." />
			<textProperty label="Subdirectory : "
			              property="filestore.dir"
			              tooltip="Note: you to proivde a default domain path!" />
			<textProperty label="File : " property="filestore.file" />
			<fileSelectionProperty label="Select target directory : "
			                       property="filestore.targetdir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the files should be stored." />
			<booleanProperty label="RegEx?"
			                 property="filestore.isregex"
			                 tooltip="Treat file name as regular expression." />
			<booleanProperty label="ListOnly?"
			                 property="filestore.listonly"
			                 tooltip="Show only the directory content." />
			<booleanProperty label="Overwrite?"
			                 property="filestore.overwrite"
			                 tooltip="Overwrite existing files." />
			<booleanProperty label="Flatten?"
			                 property="filestore.flatten"
			                 tooltip="Flatten directory structure." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<filemgmt location="${filestore.location}"
		          subdir="${filestore.dir}"
		          filename="${filestore.file}"
		          listfiles="${filestore.listonly}"
		          targetdir="${filestore.targetdir}"
		          regex="${filestore.isregex}"
		          overwrite="${filestore.overwrite}"
		          flatten="${filestore.flatten}"
		          domain="default" />
	</target>


	<!-- ================================= 
          target: tail              
         ================================= -->
	<target name="tail" depends="init" description="tail device logs">
		<property name="log.format"
		          value="{1,date,yyyy-MM-dd HH:mm:ss} |{2}| {4,number,#} | {0}{3}" />
		<property name="log.lines" value="48" />
		<antform title="DataPower Log Viewer">
			<label>Specify log target and output settings.</label>
			<textProperty label="Log Target: " property="log.target" />
			<textProperty label="Log Format: "
			              property="log.format"
			              editable="true" />
			<textProperty label="number of lines: "
			              property="log.lines"
			              editable="true" />
			<textProperty label="fail pattern: " property="log.failpattern" />
			<booleanProperty label="fail on error?"
			                 property="log.failonerror" />
			<booleanProperty label="Follow?" property="log.follow" />
			<selectionproperty label="Environment: "
			                   property="dp.env"
			                   values="${dp.envs}" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<selectDevice dp.env="${dp.env}" />

		<!-- If domainPatterns match multiple domains, tailLog will consolidate logs from these domains -->
		<!-- dp:tailLog follow="${dp.follow}" domainPatterns="def.*, ${dev.dp.domain}" lines="48" / -->

		<!-- You can also change the log format. The following template will add transation ID to the log. See User Guide for more details  -->
		<!-- You can specify any logTarget configured on the device -->

		<if>
			<or>
				<equals arg1="${log.failpattern}" arg2="" />
				<not>
					<isset property="log.failpattern" />
				</not>
			</or>
			<then>
				<echo message="no failpattern" />
				<dp:tailLog follow="${log.follow}"
				            lines="${log.lines}"
				            logTarget="${log.target}"
				            failOnError="${log.failonerror}"
				            format="${log.format}" />
			</then>
			<else>
				<dp:tailLog follow="${log.follow}"
				            lines="${log.lines}"
				            logTarget="${log.target}"
				            format="${log.format}"
				            failPatterns="${log.failpattern}" />
			</else>
		</if>

	</target>


	<!-- ================================= 
          target: analyzeLogFiles              
         ================================= -->
	<target name="analyzeLogFiles"
	        depends="init"
	        description="--> analyze DataPower log files">

		<property name="log.analyzer.filepattern" value="*log*" />
		<property name="log.analyzer.targetdir" value="${basedir}" />
		<property name="log.analyzer.sourcedir" value="${basedir}" />

		<antform title="DataPower Log File Analyzer">
			<label>Data Power Log File Analyzer</label>
			<fileSelectionProperty label="Select source directory : "
			                       property="log.analyzer.sourcedir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the XML log files reside." />
			<fileSelectionProperty label="Select target directory : "
			                       property="log.analyzer.targetdir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the result should be stored." />
			<textProperty label="Logfile Pattern : "
			              property="log.analyzer.filepattern"
			              editable="true"
			              tooltip="files that should be processed look for" />
			<textProperty label="RegEx : " property="log.analyzer.regex" />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<path id="source.path">
			<pathelement location="${log.analyzer.sourcedir}" />
		</path>

		<pathconvert dirsep="/"
		             property="converted.sourcedir"
		             refid="source.path" />

		<echo message="converted.sourcedir = ${converted.sourcedir}" />

		<xslt in="${maven.build.resourceDir.0}/xml/dummy.xml"
		      out="${log.analyzer.targetdir}/loganalysis.csv"
		      style="${maven.build.resourceDir.0}/xsl/analyze-xml-log-files.xsl"
		      force="true"
		      classpathref="dp.tools.classpath">
			<factory name="net.sf.saxon.TransformerFactoryImpl" />
			<param name="pattern" expression="${log.analyzer.regex}" />
			<param name="logFiles"
			       expression="file:///${converted.sourcedir}/?select=${log.analyzer.filepattern};recurse=no" />
		</xslt>
	</target>

	<!-- ================================= 
          target: compareConfig              
         ================================= -->
	<target name="compareConfig"
	        depends="init"
	        description="compare two DataPower config archives">
		<!--compareconfig cfgFile1="${basedir}/tmp/dp-domain-HAS-test.zip"
		         cfgFile2="${basedir}/tmp/hs-test-export.zip" /-->
		<!--compareconfig cfgFile1="${basedir}/tmp/HS-Test1.zip"
				         cfgFile2="${basedir}/tmp/HS-Test2.zip" includefiles="true" /-->
		<!-- compare cfgFile1="${basedir}/tmp/hs-test-export.zip" cfgFile2="${basedir}/tmp/hs-test-export2.zip" includeDpAuxDir="true" / -->
		<compareconfig cfgFile1="${basedir}/tmp/ucc/dp-int-gb-prod-domain.zip"
						         cfgFile2="${basedir}/tmp/ucc/dp-int-ur-prod-domain.zip" includefiles="true" />
	</target>


	<!-- ================================= 
          target: createWsdlDocumentation              
         ================================= -->
	<target name="createWsdlDocumentation"
	        depends="init"
	        description="--> create a HTML documentation for the specified WebServices (WSDL)">


		<antform title="Generate WSDL Documentation">
			<label>WebService Documentation Generator</label>
			<fileSelectionProperty label="Select source directory : "
			                       property="wsdl.sourcedir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the WSDL files reside." />
			<fileSelectionProperty label="Select target directory : "
			                       property="wsdl.targetdir"
			                       directoryChooser="true"
			                       tooltip="Name of the directory where the result should be stored." />
			<controlbar>
				<button label="Cancel" type="cancel" />
				<button label="Ok" type="ok" />
			</controlbar>
		</antform>

		<delete>
			<fileset dir="${wsdl.dir}" includes="**/*.wsdl" />
		</delete>

		<copy todir="${wsdl.dir}" flatten="true">
			<fileset dir="${wsdl.sourcedir}">
				<include name="**/*.wsdl" />
				<include name="**/*.xsd" />
			</fileset>
		</copy>

		<xslt basedir="${wsdl.dir}"
		      destdir="${wsdl.targetdir}"
		      includes="**/*.wsdl"
		      extension=".html"
		      style="${trans}"
		      force="true" />
	</target>


	<!-- ================================= 
          target: refreshWorkspace              
         ================================= -->
	<target name="refreshWorkspace"
	        description="refresh workspace"
	        depends="init">
		<eclipse.refreshLocal resource="${project.artifactId}"
		                      depth="infinite" />
		<echo message="refreshed workspace" />
	</target>


	<!-- ================= -->
	<!-- Macro Definitions -->
	<!-- ================= -->

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: chooseEnvironment          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="chooseEnvironment">
		<attribute name="argname" default="default" />
		<sequential>

		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: selectDevice          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="selectDevice">
		<attribute name="dp.env" />
		<sequential>
			<var name="dp.env.prefix" value="@{dp.env}" />

			<propertyselector property="url.props"
			                         delimiter=","
			                         match="@{dp.env}\.dp.xmlmgm\.url\.[1-9]"
			                         select="\0"
			                         casesensitive="true"
			                         distinct="true"/>
			<sortlist property="sorted.url.props" value="${url.props}" delimiter="," />

			<var name="urls" value="" />
			<for list="${sorted.url.props}" param="url.prop">
				<sequential>
					<propertycopy name="url" from="@{url.prop}" override="true"/>
					<var name="urls" value="${urls},${url}" />
				</sequential>
			</for>
			
			<propertyregex property="dp.urls"
			              input="${urls}"
			              regexp="^,(.*)"
			              select="\1"
			              casesensitive="false" />

			<echo message="----------------------------------------------------------------------------" />
			<echo message="dp.env.prefix = ${dp.env.prefix}" />
			<echo message="available device URLs = ${dp.urls}" />

			<antform title="DataPower - select device">
				<label>Choose the appropriate DataPower box.</label>
				<selectionproperty label="Device : "
				                   property="${dp.env.prefix}.dp.xmlmgm.url"
				                   values="${dp.urls}" />
				<textProperty label="Password : "
				              property="${dp.env.prefix}.dp.password"
				              password="true" />
				<controlbar>
					<button label="Cancel" type="cancel" target="cancel" />
					<button label="Ok" type="ok" />
				</controlbar>
			</antform>

			<echo message="----------------------------------------------------------------------------" />
			<echoproperties regex="${dp.env.prefix}\.dp\.((?!password).*)" />
			<echo message="----------------------------------------------------------------------------" />

		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: selectConfigFile          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="selectConfigFile">
		<attribute name="dp.env" default="DEV" />
		<sequential>
			

			<foreach>
				<filelist>
				</filelist>
			</foreach>

			<echo message="----------------------------------------------------------------------------" />
			<echo message="config directory = ${config.dir}" />
			<echo message="available config files = ${dp.devices}" />

			<antform title="DataPower - select config file">
				<label>Choose configuration file to be imported.</label>
				<selectionproperty label="Device : "
				                   property="${dp.env.prefix}.dp.xmlmgm.url"
				                   values="${dp.devices}" />
				<textProperty label="Password : "
				              property="${dp.env.prefix}.dp.password"
				              password="true" />
				<controlbar>
					<button label="Cancel" type="cancel" />
					<button label="Ok" type="ok" />
				</controlbar>
			</antform>

			<echo message="----------------------------------------------------------------------------" />
			<echoproperties regex="${dp.env.prefix}\.dp\.((?!password).*)" />
			<echo message="----------------------------------------------------------------------------" />
		</sequential>
	</macrodef>


	<!-- = = = = = = = = = = = = = = = = =
          macrodef: split-export-file-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="split-export-file-macro"
	          description="split an export.xml file into groups of objects according to the config in config/split-objects.properties">
		<attribute name="export-file" />
		<attribute name="split-dir" />
		<attribute name="xcfg-files-prefix" />
		<sequential>
			<!-- Load the split configuration -->
			<property name="split-config-file"
			          value="split-service-objects.properties" />
			<loadproperties srcfile="${maven.build.resourceDir.0}/${split-config-file}" />

			<!-- Set the style-sheets for the split actions -->
			<property name="split-files-style"
			          value="${maven.build.resourceDir.0}/xsl/split-files-style.xsl" />
			<property name="split-objects-style"
			          value="${maven.build.resourceDir.0}/xsl/split-objects-style.xsl" />
			<property name="split-objects-intrinsic-style"
			          value="${maven.build.resourceDir.0}/xsl/split-objects-intrinsic-style.xsl" />
			<property name="split-objects-nocat-style"
			          value="${maven.build.resourceDir.0}/xsl/split-objects-nocat-style.xsl" />
			<property name="split-style-policy-style"
			          value="${maven.build.resourceDir.0}/xsl/split-style-policy-style.xsl" />

			<!-- Clear the split dir first -->
			<delete dir="@{split-dir}" />
			<mkdir dir="@{split-dir}" />

			<!-- Now start to split according to the settings in the files, groups must be maintained here, objects in the file -->
			<echo message="Start splitting the export-file @{export-file}..." />

			<!-- Split away the files section first -->
			<xslt processor="trax"
			      in="@{export-file}"
			      style="${split-files-style}"
			      out="@{split-dir}/files.xml"
			      classpathref="dp.tools.classpath" />

			<!-- Now split away the crypto, lbgs, style-helpers -->
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-10-crypto.xcfg"
			                       objects="'${svc.10.objects}'" />
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-20-lbgs.xcfg"
			                       objects="'${svc.20.objects}'" />
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-25-style-helper.xcfg"
			                       objects="'${svc.25.objects}'" />

			<!-- Now split away all style-rules and actinos -->
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-30-rules-and-actions.xcfg"
			                       objects="'${svc.30.objects}'" />

			<!-- Now split away the style-policy -->
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-40-style-policy.xcfg"
			                       objects="'${svc.40.objects}'" />

			<!-- Now split away WebAppFW policies -->
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-45-webappfw-policy.xcfg"
			                       objects="'${svc.45.objects}'" />

			<!-- Now split away the aux-objects, monitors, fsh, service -->
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-60-aux-objects.xcfg"
			                       objects="'${svc.60.objects}'" />
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-65-monitors.xcfg"
			                       objects="'${svc.65.objects}'" />
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-70-fsh.xcfg"
			                       objects="'${svc.70.objects}'" />
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-80-service.xcfg"
			                       objects="'${svc.80.objects}'" />
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-90-logtargets.xcfg"
			                       objects="'${svc.90.objects}'" />

			<!-- Now split away the intrinsic objects -> check them if present -->
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-intrinsic-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-98-intrinsic.xcfg"
			                       objects="''" />

			<!-- And now split away the uncategorized objects -> check them if present -->
			<extract-objects-macro input="@{export-file}"
			                       style="${split-objects-nocat-style}"
			                       output="@{split-dir}/@{xcfg-files-prefix}-99-nocat.xcfg"
			                       objects="'${svc.99.objects}'" />

			<echo message="Done splitting the export-file @{export-file}. Please check the files in @{split-dir}" />
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: split-domain-objects-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="split-domain-objects-macro">
		<attribute name="device" />
		<attribute name="domain" />
		<sequential>
			<!-- Properties used in this task -->
			<property name="export-dir"
			          value="dist/download/object-export-default" />
			<property name="export-file" value="${export-dir}/export.xml" />
			<property name="split-dir"
			          value="xcfg/in-work/@{device}-@{domain}" />
			<property name="xcfg-files-prefix" value="@{domain}" />

			<!-- Load the split configuration -->
			<property name="split-config-file"
			          value="split-domain-objects.properties" />
			<loadproperties srcfile="${maven.build.resourceDir.0}/${split-config-file}" />

			<!-- Set the style-sheets for the split actions -->
			<property name="split-files-style"
			          value="${maven.build.resourceDir.0}/xsl/split-files-style.xsl" />
			<property name="split-objects-style"
			          value="${maven.build.resourceDir.0}/xsl/split-objects-style.xsl" />
			<property name="split-objects-intrinsic-style"
			          value="${maven.build.resourceDir.0}/xsl/split-objects-intrinsic-style.xsl" />
			<property name="split-objects-nocat-style"
			          value="${maven.build.resourceDir.0}/xsl/split-objects-nocat-style.xsl" />

			<!-- Clear the dirs first -->
			<delete dir="${split-dir}" />
			<mkdir dir="${split-dir}" />

			<!-- Copy the local files -->
			<echo message="Copying the local files..." />
			<copy todir="${split-dir}" overwrite="true" verbose="true">
				<fileset dir="${export-dir}" includes="local/**" />
			</copy>

			<!-- Now start to split according to the settings in the files, groups must be maintained here, objects in the file -->
			<echo message="Start splitting the export-file ${export-file}..." />

			<!-- Split away the files section first -->
			<xslt processor="trax"
			      in="${export-file}"
			      style="${split-files-style}"
			      out="${split-dir}/files.xml" />

			<!-- Now split away the crypto, user, network, dns, mgmt, nfs, stats, domain and logtargets -->
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-10-crypto.xcfg"
			                       objects="'${dom.10.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-20-user.xcfg"
			                       objects="'${dom.20.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-30-network.xcfg"
			                       objects="'${dom.30.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-40-dns.xcfg"
			                       objects="'${dom.40.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-50-mgmt.xcfg"
			                       objects="'${dom.50.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-60-nfs.xcfg"
			                       objects="'${dom.60.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-70-stats.xcfg"
			                       objects="'${dom.70.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-80-domains.xcfg"
			                       objects="'${dom.80.objects}'" />
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-90-logtargets.xcfg"
			                       objects="'${dom.90.objects}'" />

			<!-- Now split away the intrinsic objects -> check them if present -->
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-intrinsic-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-98-intrinsic.xcfg"
			                       objects="''" />

			<!-- And now split away the uncategorized objects -> check them if present -->
			<extract-objects-macro input="${export-file}"
			                       style="${split-objects-nocat-style}"
			                       output="${split-dir}/${xcfg-files-prefix}-99-nocat.xcfg"
			                       objects="'${dom.99.objects}'" />

			<echo message="Done splitting the export-file ${export-file}. Please check the files in ${split-dir}." />
		</sequential>
	</macrodef>


	<!-- = = = = = = = = = = = = = = = = =
          macrodef: extract-objects-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="extract-objects-macro">
		<attribute name="input" />
		<attribute name="style" />
		<attribute name="output" />
		<attribute name="objects" />
		<sequential>
			<xslt processor="trax"
			      in="@{input}"
			      style="@{style}"
			      out="@{output}"
			      classpathref="dp.tools.classpath">
				<param name="filterObjectTypes" expression="@{objects}" />
			</xslt>
		</sequential>
	</macrodef>


	<!-- = = = = = = = = = = = = = = = = =
          macrodef: dp-run-soma-request-macro          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="dp-run-soma-request-macro">
		<attribute name="mgmt-ip" />
		<attribute name="mgmt-port" />
		<attribute name="mgmt-user" />
		<attribute name="mgmt-pwd" />
		<attribute name="soma-request" />
		<attribute name="soma-response" />
		<sequential>
			<delete file="@{soma-response}" />
			<echo message="Running curl with user @{mgmt-user} and pw ********* against @{mgmt-ip}:@{mgmt-port}" />
			<property name="input-file" value="@{soma-request}" />
			<property name="output-file" value="@{soma-response}" />
			<exec executable="${curl.exec}">
				<arg value="--data-binary" />
				<arg value="@${input-file}" />
				<arg value="https://@{mgmt-ip}:@{mgmt-port}/service/mgmt/current" />
				<arg value="-kv" />
				<arg value="-u" />
				<arg value="@{mgmt-user}:@{mgmt-pwd}" />
				<arg value="-o${output-file}" />
			</exec>
		</sequential>
	</macrodef>

	<!-- - - - - - - - - - - - - - - - - - 
	  target: cancel 
	 - - - - - - - - - - - - - - - - - -->
	<target name="cancel">
		<fail message="Process has been aborted!" status="0" />
	</target>

</project>
